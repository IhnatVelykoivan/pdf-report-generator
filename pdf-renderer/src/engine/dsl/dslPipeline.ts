// pdf-renderer/src/engine/dsl/dslPipeline.ts

import { dslGenerator, type ChatMessage, type DSLGenerationResult } from './dslGenerator';
import { validateDSL } from '../../validation/dslValidator';
import { autoFixDSL } from '../../middleware/dslAutoFixer';
import { detectLanguage, type SupportedLanguage } from '../../utils/languageUtils';
import axios from 'axios';

export interface PipelineResult {
    success: boolean;
    dsl?: any;
    pdfBuffer?: Buffer;
    error?: string;
    retryCount?: number;
}

export interface PipelineOptions {
    maxRetries?: number;
    claudeApiUrl?: string;
}

export class DSLPipeline {
    private maxRetries: number = 3;
    private claudeApiUrl: string;

    constructor(options: PipelineOptions = {}) {
        this.maxRetries = options.maxRetries || 3;
        this.claudeApiUrl = options.claudeApiUrl || 'http://localhost:3001/api/claude';
    }

    /**
     * –ü–æ–ª–Ω—ã–π pipeline –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ DSL –∏ PDF
     */
    public async generateFromConversation(
        conversationHistory: ChatMessage[],
        userMessage?: string
    ): Promise<PipelineResult> {
        try {
            // 1. –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–∂–∏–¥–∞–µ–º—ã–π —è–∑—ã–∫
            const lastMessage = userMessage || conversationHistory
                .filter(msg => msg.role === 'user')
                .pop()?.content || '';

            const expectedLanguage = detectLanguage(lastMessage);
            console.log(`üåê –û–∂–∏–¥–∞–µ–º—ã–π —è–∑—ã–∫: ${expectedLanguage}`);

            // 2. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º DSL (—Å –≤–æ–∑–º–æ–∂–Ω—ã–º –æ–±—Ä–∞—â–µ–Ω–∏–µ–º –∫ Claude)
            let dslResult: DSLGenerationResult | null = null;
            let retryCount = 0;
            let isValidLanguage = false;

            while (!isValidLanguage && retryCount < this.maxRetries) {
                // –ü—Ä–æ–±—É–µ–º —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —á–µ—Ä–µ–∑ Claude
                try {
                    dslResult = await this.generateDSLWithClaude(conversationHistory, expectedLanguage);
                } catch (claudeError) {
                    console.warn('‚ö†Ô∏è Claude –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback');
                    dslResult = await dslGenerator.generateDSLFromConversation(conversationHistory, expectedLanguage);
                }

                // –í–∞–ª–∏–¥–∏—Ä—É–µ–º —è–∑—ã–∫
                isValidLanguage = dslGenerator.validateDSLLanguage(dslResult.dsl, expectedLanguage);

                if (!isValidLanguage) {
                    console.warn(`‚ö†Ô∏è DSL —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –Ω–µ –Ω–∞ —Ç–æ–º —è–∑—ã–∫–µ (–ø–æ–ø—ã—Ç–∫–∞ ${retryCount + 1}/${this.maxRetries})`);
                    retryCount++;

                    if (retryCount < this.maxRetries) {
                        // –ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–∏
                        conversationHistory = [
                            ...conversationHistory,
                            {
                                role: 'user',
                                content: this.getLanguageEnforcementPrompt(expectedLanguage)
                            }
                        ];
                    }
                } else {
                    console.log('‚úÖ DSL —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —è–∑—ã–∫–µ');
                }
            }

            if (!dslResult || !isValidLanguage) {
                // –ò—Å–ø–æ–ª—å–∑—É–µ–º fallback –ø–æ—Å–ª–µ –≤—Å–µ—Ö –ø–æ–ø—ã—Ç–æ–∫
                console.warn('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å DSL –Ω–∞ –Ω—É–∂–Ω–æ–º —è–∑—ã–∫–µ, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback');
                dslResult = await dslGenerator.generateDSLFromConversation(conversationHistory, expectedLanguage);
            }

            // 3. –ü—Ä–∏–º–µ–Ω—è–µ–º –∞–≤—Ç–æ–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
            const fixedDSL = autoFixDSL(dslResult.dsl);

            // 4. –í–∞–ª–∏–¥–∏—Ä—É–µ–º DSL
            const validationResult = validateDSL(fixedDSL);
            if (!validationResult.valid) {
                return {
                    success: false,
                    error: `–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ DSL: ${validationResult.errors?.join(', ')}`
                };
            }

            // 5. –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            return {
                success: true,
                dsl: fixedDSL,
                retryCount
            };

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –≤ DSL pipeline:', error);
            return {
                success: false,
                error: error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'
            };
        }
    }

    /**
     * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è DSL —á–µ—Ä–µ–∑ Claude API
     */
    private async generateDSLWithClaude(
        conversationHistory: ChatMessage[],
        expectedLanguage: SupportedLanguage
    ): Promise<DSLGenerationResult> {
        const response = await axios.post<DSLGenerationResult>(`${this.claudeApiUrl}/generate-dsl`, {
            conversationHistory,
            expectedLanguage
        });

        return response.data;
    }

    /**
     * –ü—Ä–æ–º–ø—Ç –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –Ω—É–∂–Ω–æ–≥–æ —è–∑—ã–∫–∞
     */
    private getLanguageEnforcementPrompt(language: SupportedLanguage): string {
        const prompts: Record<SupportedLanguage, string> = {
            ru: '–í–ê–ñ–ù–û: –°–æ–∑–¥–∞–π –æ—Ç—á—ë—Ç –¢–û–õ–¨–ö–û –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ. –í–°–ï —Ç–µ–∫—Å—Ç—ã, –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∏ –ø–æ–¥–ø–∏—Å–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –Ω–∞ —Ä—É—Å—Å–∫–æ–º!',
            en: 'IMPORTANT: Create report ONLY in English. ALL texts, titles and labels must be in English!',
            ar: 'ŸÖŸáŸÖ: ÿ•ŸÜÿ¥ÿßÿ° ÿßŸÑÿ™ŸÇÿ±Ÿäÿ± ÿ®ÿßŸÑŸÑÿ∫ÿ© ÿßŸÑÿπÿ±ÿ®Ÿäÿ© ŸÅŸÇÿ∑. Ÿäÿ¨ÿ® ÿ£ŸÜ ÿ™ŸÉŸàŸÜ ÿ¨ŸÖŸäÿπ ÿßŸÑŸÜÿµŸàÿµ ŸàÿßŸÑÿπŸÜÿßŸàŸäŸÜ ÿ®ÿßŸÑŸÑÿ∫ÿ© ÿßŸÑÿπÿ±ÿ®Ÿäÿ©!'
        };

        return prompts[language];
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∏–¥–±–µ–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    public async processFeedback(
        currentDSL: any,
        userFeedback: string
    ): Promise<DSLGenerationResult> {
        try {
            // –ü—Ä–æ–±—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —á–µ—Ä–µ–∑ Claude
            const response = await axios.post<DSLGenerationResult>(`${this.claudeApiUrl}/feedback`, {
                currentDSL,
                userFeedback
            });

            const result: DSLGenerationResult = response.data;

            // –ü—Ä–∏–º–µ–Ω—è–µ–º –∞–≤—Ç–æ–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
            result.dsl = autoFixDSL(result.dsl);

            return result;

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∏–¥–±–µ–∫–∞:', error);

            // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ–∫—É—â–∏–π DSL –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫
            return {
                dsl: currentDSL,
                explanation: '–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ñ–∏–¥–±–µ–∫',
                suggestions: ['–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –∑–∞–ø—Ä–æ—Å']
            };
        }
    }
}

export const dslPipeline = new DSLPipeline();