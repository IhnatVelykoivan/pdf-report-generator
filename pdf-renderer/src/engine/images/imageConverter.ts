import sharp from 'sharp';

/*** Converts a PDF buffer to an array of image buffers (one per page)*/

export const convertPDFToImages = async (pdfBuffer: Buffer, dpi: number = 300): Promise<string[]> => {
    try {
        console.log(`Converting PDF to images with DPI: ${dpi}`);

        // Checking the input parameter
        if (!pdfBuffer || pdfBuffer.length === 0) {
            throw new Error('Empty PDF buffer provided');
        }

        // In a real application, a library for converting PDF to images would be used here
        // For example, pdf-lib, pdf.js, or external utilities like pdftoppm
        // For demonstration purposes, we create test images
        // Creating images based on the number of pages
        // Estimating the number of pages (in a real application, this would be done using a PDF library)

        const estimatedPages = Math.ceil(pdfBuffer.length / 30000);
        const pageCount = Math.min(Math.max(estimatedPages, 1), 10); // Limiting to 1 to 10 for safety

        const images: string[] = [];

        for (let i = 0; i < pageCount; i++) {
            // Creating a unique image for each page
            const pageNumber = i + 1;

            const image = await sharp({
                create: {
                    width: 595, // A4 width at 72 DPI
                    height: 842, // A4 height at 72 DPI
                    channels: 4,
                    background: { r: 255, g: 255, b: 255, alpha: 1 }
                }
            })
                .composite([{
                    input: Buffer.from(`<svg width="595" height="842" xmlns="http://www.w3.org/2000/svg">
                    <rect x="0" y="0" width="595" height="842" fill="#ffffff" />
                    <rect x="20" y="20" width="555" height="802" fill="#f8f8f8" stroke="#cccccc" />
                    <text x="297" y="50" font-family="Arial" font-size="24" text-anchor="middle" fill="#333333">PDF Page Preview</text>
                    <text x="297" y="100" font-family="Arial" font-size="16" text-anchor="middle" fill="#666666">Page ${pageNumber} of ${pageCount}</text>
                    <text x="297" y="400" font-family="Arial" font-size="16" text-anchor="middle" fill="#666666">This is a mock preview of page ${pageNumber}</text>
                    <text x="297" y="800" font-family="Arial" font-size="12" text-anchor="middle" fill="#999999">Generated by PDF Renderer Service</text>
                </svg>`),
                    top: 0,
                    left: 0
                }])
                .png()
                .toBuffer();

            // Converting the buffer to base64
            const base64Image = `data:image/png;base64,${image.toString('base64')}`;
            images.push(base64Image);
        }

        return images;
    } catch (error) {
        console.error('Error converting PDF to images:', error);

        // If an error occurred, return a placeholder with an error message
        const errorImage = await sharp({
            create: {
                width: 595,
                height: 842,
                channels: 4,
                background: { r: 255, g: 255, b: 255, alpha: 1 }
            }
        })
            .composite([{
                input: Buffer.from(`<svg width="595" height="842" xmlns="http://www.w3.org/2000/svg">
                <rect x="0" y="0" width="595" height="842" fill="#ffffff" />
                <rect x="20" y="20" width="555" height="802" fill="#fff0f0" stroke="#ffcccc" />
                <text x="297" y="400" font-family="Arial" font-size="24" text-anchor="middle" fill="#cc0000">Error Converting PDF</text>
                <text x="297" y="450" font-family="Arial" font-size="16" text-anchor="middle" fill="#666666">${
                    error instanceof Error ? error.message.substring(0, 50) : 'Unknown error'
                }</text>
            </svg>`),
                top: 0,
                left: 0
            }])
            .png()
            .toBuffer();

        const base64ErrorImage = `data:image/png;base64,${errorImage.toString('base64')}`;
        return [base64ErrorImage];
    }
};