import sharp from 'sharp';

/**
 * Converts a PDF buffer to an array of image buffers (one per page)
 */
export const convertPDFToImages = async (pdfBuffer: Buffer, dpi: number = 300): Promise<string[]> => {
    try {
        console.log(`Converting PDF to images with DPI: ${dpi}`);

        // Проверка входного параметра
        if (!pdfBuffer || pdfBuffer.length === 0) {
            throw new Error('Empty PDF buffer provided');
        }

        // В реальном приложении здесь бы использовалась библиотека для конвертации PDF в изображения
        // Например, pdf-lib, pdf.js или вызовы внешних утилит как pdftoppm
        // Для демонстрации создаем тестовые изображения

        // Создаем изображения в зависимости от количества страниц
        // Примерно определяем количество страниц (в реальном приложении это бы делалось через pdf библиотеку)
        const estimatedPages = Math.ceil(pdfBuffer.length / 30000);
        const pageCount = Math.min(Math.max(estimatedPages, 1), 10); // Ограничиваем от 1 до 10 для безопасности

        const images: string[] = [];

        for (let i = 0; i < pageCount; i++) {
            // Создаем уникальное изображение для каждой страницы
            const pageNumber = i + 1;

            const image = await sharp({
                create: {
                    width: 595, // A4 width at 72 DPI
                    height: 842, // A4 height at 72 DPI
                    channels: 4,
                    background: { r: 255, g: 255, b: 255, alpha: 1 }
                }
            })
                .composite([{
                    input: Buffer.from(`<svg width="595" height="842" xmlns="http://www.w3.org/2000/svg">
                    <rect x="0" y="0" width="595" height="842" fill="#ffffff" />
                    <rect x="20" y="20" width="555" height="802" fill="#f8f8f8" stroke="#cccccc" />
                    <text x="297" y="50" font-family="Arial" font-size="24" text-anchor="middle" fill="#333333">PDF Page Preview</text>
                    <text x="297" y="100" font-family="Arial" font-size="16" text-anchor="middle" fill="#666666">Page ${pageNumber} of ${pageCount}</text>
                    <text x="297" y="400" font-family="Arial" font-size="16" text-anchor="middle" fill="#666666">This is a mock preview of page ${pageNumber}</text>
                    <text x="297" y="800" font-family="Arial" font-size="12" text-anchor="middle" fill="#999999">Generated by PDF Renderer Service</text>
                </svg>`),
                    top: 0,
                    left: 0
                }])
                .png()
                .toBuffer();

            // Конвертируем буфер в base64
            const base64Image = `data:image/png;base64,${image.toString('base64')}`;
            images.push(base64Image);
        }

        return images;
    } catch (error) {
        console.error('Error converting PDF to images:', error);

        // Если произошла ошибка, возвращаем заглушку с сообщением об ошибке
        const errorImage = await sharp({
            create: {
                width: 595,
                height: 842,
                channels: 4,
                background: { r: 255, g: 255, b: 255, alpha: 1 }
            }
        })
            .composite([{
                input: Buffer.from(`<svg width="595" height="842" xmlns="http://www.w3.org/2000/svg">
                <rect x="0" y="0" width="595" height="842" fill="#ffffff" />
                <rect x="20" y="20" width="555" height="802" fill="#fff0f0" stroke="#ffcccc" />
                <text x="297" y="400" font-family="Arial" font-size="24" text-anchor="middle" fill="#cc0000">Error Converting PDF</text>
                <text x="297" y="450" font-family="Arial" font-size="16" text-anchor="middle" fill="#666666">${
                    error instanceof Error ? error.message.substring(0, 50) : 'Unknown error'
                }</text>
            </svg>`),
                top: 0,
                left: 0
            }])
            .png()
            .toBuffer();

        const base64ErrorImage = `data:image/png;base64,${errorImage.toString('base64')}`;
        return [base64ErrorImage];
    }
};