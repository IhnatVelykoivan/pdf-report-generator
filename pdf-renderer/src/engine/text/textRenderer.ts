/**
 * Renders text to PDF document with BULLETPROOF support for Arabic and other RTL scripts
 */
import PDFDocument from 'pdfkit';
import { prepareText, containsRTL, isArabicOnly } from '../../utils/bidirectionalTextUtil';

interface TextRenderPosition {
    x: number;
    y: number;
}

/**
 * –£–õ–£–ß–®–ï–ù–ù–ê–Ø —Ñ—É–Ω–∫—Ü–∏—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —à—Ä–∏—Ñ—Ç–∞ (–æ—Å–Ω–æ–≤–∞–Ω–∞ –Ω–∞ —Ä–∞–±–æ—á–µ–º —Ç–µ—Å—Ç–µ)
 */
const getCorrectFont = (text: string, styleFont?: string): string => {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∞—Ä–∞–±—Å–∫–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤
    const hasArabic = /[\u0600-\u06FF\u0750-\u077F\u08A0-\u08FF]/.test(text);

    // –ï—Å–ª–∏ –µ—Å—Ç—å –∞—Ä–∞–±—Å–∫–∏–µ —Å–∏–º–≤–æ–ª—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—É—é —Ü–µ–ø–æ—á–∫—É —à—Ä–∏—Ñ—Ç–æ–≤
    if (hasArabic) {
        console.log(`üî§ –û–±–Ω–∞—Ä—É–∂–µ–Ω –∞—Ä–∞–±—Å–∫–∏–π —Ç–µ–∫—Å—Ç: "${text.substring(0, 30)}..."`);

        // –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç —à—Ä–∏—Ñ—Ç–æ–≤ –¥–ª—è –∞—Ä–∞–±—Å–∫–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ (–ø–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º —Ä–∞–±–æ—á–µ–≥–æ —Ç–µ—Å—Ç–∞)
        const arabicFontPriority = [
            styleFont,           // –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω –≤ —Å—Ç–∏–ª–µ
            'DejaVuSans',       // –û—Å–Ω–æ–≤–Ω–æ–π —à—Ä–∏—Ñ—Ç (—Ä–∞–±–æ—Ç–∞–µ—Ç –≤ —Ç–µ—Å—Ç–µ)
            'DejaVuSans-Bold',  // –ñ–∏—Ä–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç
            'NotoSansArabic',   // –°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∞—Ä–∞–±—Å–∫–∏–π —à—Ä–∏—Ñ—Ç
            'Helvetica'         // Fallback
        ].filter((font): font is string => Boolean(font)); // –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: —Ñ–∏–ª—å—Ç—Ä—É–µ–º –∏ —Ç–∏–ø–∏–∑–∏—Ä—É–µ–º

        console.log(`üî§ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç —à—Ä–∏—Ñ—Ç–æ–≤ –¥–ª—è –∞—Ä–∞–±—Å–∫–æ–≥–æ —Ç–µ–∫—Å—Ç–∞: ${arabicFontPriority.join(' -> ')}`);
        return arabicFontPriority[0] || 'DejaVuSans'; // –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: –¥–æ–±–∞–≤–ª–µ–Ω fallback
    }

    // –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω —à—Ä–∏—Ñ—Ç –≤ —Å—Ç–∏–ª–µ, –ø—Ä–æ–≤–µ—Ä—è–µ–º –µ–≥–æ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å
    if (styleFont) {
        // –°–ø–∏—Å–æ–∫ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö —à—Ä–∏—Ñ—Ç–æ–≤
        const supportedFonts = ['DejaVuSans', 'DejaVuSans-Bold', 'NotoSansArabic', 'Helvetica', 'Courier', 'Times-Roman'];

        if (supportedFonts.includes(styleFont)) {
            return styleFont;
        } else {
            console.warn(`‚ö†Ô∏è –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —à—Ä–∏—Ñ—Ç ${styleFont}, –∏—Å–ø–æ–ª—å–∑—É–µ–º DejaVuSans`);
        }
    }

    // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏—Å–ø–æ–ª—å–∑—É–µ–º DejaVuSans (–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∫–∏—Ä–∏–ª–ª–∏—Ü—É –∏ —á–∞—Å—Ç–∏—á–Ω–æ –∞—Ä–∞–±—Å–∫–∏–π)
    return 'DejaVuSans';
};

/**
 * –£–°–ò–õ–ï–ù–ù–ê–Ø —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —à—Ä–∏—Ñ—Ç–∞ —Å fallback —Ü–µ–ø–æ—á–∫–æ–π
 */
const applyFontWithFallback = (doc: PDFKit.PDFDocument, text: string, styleFont?: string): void => {
    const desiredFont = getCorrectFont(text, styleFont);

    // –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è —Ü–µ–ø–æ—á–∫–∞ —à—Ä–∏—Ñ—Ç–æ–≤ (–æ—Å–Ω–æ–≤–∞–Ω–∞ –Ω–∞ —Ä–∞–±–æ—á–µ–º —Ç–µ—Å—Ç–µ)
    const fontFallbackChain = [
        desiredFont,
        'DejaVuSans',      // –û—Å–Ω–æ–≤–Ω–æ–π fallback (—Ä–∞–±–æ—Ç–∞–µ—Ç –≤ —Ç–µ—Å—Ç–µ)
        'DejaVuSans-Bold', // –ñ–∏—Ä–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç DejaVu
        'NotoSansArabic',  // –°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∞—Ä–∞–±—Å–∫–∏–π
        'Helvetica',       // –í—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π PDFKit
        'Courier',         // –í—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π PDFKit
        'Times-Roman'      // –í—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π PDFKit
    ];

    let fontApplied = false;

    for (const fontName of fontFallbackChain) {
        if (fontApplied) break;

        try {
            doc.font(fontName);
            console.log(`‚úÖ –ü—Ä–∏–º–µ–Ω—ë–Ω —à—Ä–∏—Ñ—Ç: ${fontName} –¥–ª—è —Ç–µ–∫—Å—Ç–∞: "${text.substring(0, 30)}..."`);
            fontApplied = true;
        } catch (fontError) {
            console.warn(`‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏–º–µ–Ω–∏—Ç—å —à—Ä–∏—Ñ—Ç ${fontName}, –ø—Ä–æ–±—É–µ–º —Å–ª–µ–¥—É—é—â–∏–π...`);
        }
    }

    if (!fontApplied) {
        console.error(`‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏–º–µ–Ω–∏—Ç—å –Ω–∏ –æ–¥–∏–Ω —à—Ä–∏—Ñ—Ç –¥–ª—è —Ç–µ–∫—Å—Ç–∞: "${text.substring(0, 30)}..."`);
        throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏–º–µ–Ω–∏—Ç—å —à—Ä–∏—Ñ—Ç');
    }
};

/**
 * –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Ü–≤–µ—Ç –≤ —Ñ–æ—Ä–º–∞—Ç, –ø–æ–Ω—è—Ç–Ω—ã–π PDFKit
 */
const convertColor = (color: string): string => {
    if (!color) return '#000000';

    // –ï—Å–ª–∏ —Ü–≤–µ—Ç —É–∂–µ –≤ hex —Ñ–æ—Ä–º–∞—Ç–µ
    if (color.startsWith('#')) {
        return color;
    }

    // –ï—Å–ª–∏ —Ü–≤–µ—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ rgba –∏–ª–∏ rgb
    if (color.startsWith('rgba') || color.startsWith('rgb')) {
        const matches = color.match(/\d+/g);
        if (matches && matches.length >= 3) {
            const r = parseInt(matches[0]);
            const g = parseInt(matches[1]);
            const b = parseInt(matches[2]);

            // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ hex
            const toHex = (n: number) => {
                const hex = n.toString(16);
                return hex.length === 1 ? '0' + hex : hex;
            };

            return `#${toHex(r)}${toHex(g)}${toHex(b)}`;
        }
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –∏–º–µ–Ω–æ–≤–∞–Ω–Ω—ã–µ —Ü–≤–µ—Ç–∞ –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∏—Ö
    const namedColors: Record<string, string> = {
        'black': '#000000',
        'white': '#FFFFFF',
        'red': '#FF0000',
        'green': '#008000',
        'blue': '#0000FF',
        'yellow': '#FFFF00',
        'cyan': '#00FFFF',
        'magenta': '#FF00FF',
        'gray': '#808080',
        'grey': '#808080',
        'darkgray': '#404040',
        'darkgrey': '#404040',
        'lightgray': '#C0C0C0',
        'lightgrey': '#C0C0C0'
    };

    const lowerColor = color.toLowerCase();
    if (namedColors[lowerColor]) {
        return namedColors[lowerColor];
    }

    // –ï—Å–ª–∏ –Ω–µ –º–æ–∂–µ–º —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —á–µ—Ä–Ω—ã–π
    console.warn(`Unknown color format: ${color}, using black`);
    return '#000000';
};

/**
 * –ì–õ–ê–í–ù–ê–Ø —Ñ—É–Ω–∫—Ü–∏—è —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ —Ç–µ–∫—Å—Ç–∞ —Å —É—Å–∏–ª–µ–Ω–Ω–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π RTL
 */
export const renderText = (
    doc: PDFKit.PDFDocument,
    text: string,
    style: any = {}
): void => {
    try {
        // Check if the text is a string
        if (typeof text !== 'string') {
            console.warn(`Text content is not a string: ${typeof text}`);
            text = String(text || '');
        }

        if (!text.trim()) {
            console.warn('–ü—É—Å—Ç–æ–π —Ç–µ–∫—Å—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥');
            return;
        }

        console.log(`üé® –†–µ–Ω–¥–µ—Ä–∏–º —Ç–µ–∫—Å—Ç: "${text.substring(0, 50)}..." —Å–æ —Å—Ç–∏–ª–µ–º:`, JSON.stringify(style, null, 2));

        // Save the current document state
        doc.save();

        // –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏
        const hasArabic = /[\u0600-\u06FF\u0750-\u077F\u08A0-\u08FF]/.test(text);
        const isRTL = style?.direction === 'rtl' ||
            (!style?.direction && (hasArabic || containsRTL(text)));
        const isFullyArabic = isArabicOnly(text);

        console.log(`üìù –ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—Å—Ç–∞: hasArabic=${hasArabic}, isRTL=${isRTL}, isFullyArabic=${isFullyArabic}, direction=${style?.direction}`);

        // –£–°–ò–õ–ï–ù–ù–û–ï –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —à—Ä–∏—Ñ—Ç–∞
        applyFontWithFallback(doc, text, style?.font);

        // Apply other text styles
        if (style?.fontSize) {
            doc.fontSize(style.fontSize);
        }

        // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ü–≤–µ—Ç —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–µ–π
        if (style?.color) {
            const convertedColor = convertColor(style.color);
            doc.fillColor(convertedColor);
            console.log(`üé® –ü—Ä–∏–º–µ–Ω—ë–Ω —Ü–≤–µ—Ç: ${style.color} -> ${convertedColor}`);
        }

        // –£–õ–£–ß–®–ï–ù–ù–´–ï –æ–ø—Ü–∏–∏ –¥–ª—è —Ç–µ–∫—Å—Ç–∞ (–æ—Å–Ω–æ–≤–∞–Ω–æ –Ω–∞ —Ä–∞–±–æ—á–µ–º —Ç–µ—Å—Ç–µ)
        const baseAlign = isRTL ? 'right' : 'left';
        const finalAlign = style?.align || baseAlign;

        // –î–ª—è –∞—Ä–∞–±—Å–∫–æ–≥–æ —Ç–µ–∫—Å—Ç–∞, –µ—Å–ª–∏ align –Ω–µ –∑–∞–¥–∞–Ω —è–≤–Ω–æ, –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Å—Ç–∞–≤–∏–º right (–∫–∞–∫ –≤ —Ä–∞–±–æ—á–µ–º —Ç–µ—Å—Ç–µ)
        const correctedAlign = hasArabic && !style?.align ? 'right' : finalAlign;

        const textOptions: PDFKit.Mixins.TextOptions = {
            width: style?.width,
            align: correctedAlign,
            continued: style?.continued || false,
            indent: style?.indent || 0,
            paragraphGap: style?.paragraphGap || 0,
            lineBreak: style?.lineBreak !== false,
            underline: style?.underline || false,
        };

        console.log(`üìê –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ç–µ–∫—Å—Ç–∞: align=${correctedAlign}, width=${style?.width}, lineBreak=${textOptions.lineBreak}`);

        // Determine the final position of the text
        const finalPosition: TextRenderPosition = style?.position
            ? { ...style.position }
            : { x: doc.x, y: doc.y };

        // –£–°–ò–õ–ï–ù–ù–ê–Ø –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        const preparedText = prepareText(text, isRTL);

        console.log(`üîÑ –ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç: "${preparedText.substring(0, 50)}..."`);

        // Render text with direction consideration
        doc.text(preparedText, finalPosition.x, finalPosition.y, textOptions);

        console.log(`‚úÖ –¢–µ–∫—Å—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç—Ä–µ–Ω–¥–µ—Ä–µ–Ω –≤ –ø–æ–∑–∏—Ü–∏–∏ (${finalPosition.x}, ${finalPosition.y})`);

        // Restore original state
        doc.restore();
    } catch (error) {
        console.error('‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ —Ç–µ–∫—Å—Ç–∞:', error);

        try {
            // FALLBACK —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥ —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
            doc.font('Helvetica')
                .fontSize(12)
                .fillColor('#FF0000')
                .text(`[–û–®–ò–ë–ö–ê –†–ï–ù–î–ï–†–ò–ù–ì–ê]: ${text.substring(0, 100)}`,
                    style?.position?.x || 50,
                    style?.position?.y || 50,
                    { width: 400 });

            console.log('üö® –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∞ fallback –æ—à–∏–±–∫–∞ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞');
        } catch (fallbackError) {
            console.error('üíÄ –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å –¥–∞–∂–µ fallback —Å–æ–æ–±—â–µ–Ω–∏–µ:', fallbackError);
        }
    }
};