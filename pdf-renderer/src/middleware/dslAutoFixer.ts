/**
 * Middleware –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è DSL —Å—Ç—Ä—É–∫—Ç—É—Ä
 * –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ —à—Ä–∏—Ñ—Ç—ã –∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–ª—è –∞—Ä–∞–±—Å–∫–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
 *
 * –§–∞–π–ª: pdf-renderer/src/middleware/dslAutoFixer.ts
 */

interface DSLElement {
    type: string;
    content: any;
    position?: { x: number; y: number };
    style?: any;
}

interface DSLPage {
    elements: DSLElement[];
    style?: any;
}

interface DSL {
    template?: string;
    defaultDirection?: string;
    pages: DSLPage[];
}

/**
 * –ì–õ–ê–í–ù–ê–Ø —Ñ—É–Ω–∫—Ü–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è DSL
 */
export const autoFixDSL = (dsl: any): any => {
    console.log('üîß –ù–ê–ß–ò–ù–ê–ï–ú –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï DSL...');

    if (!dsl || typeof dsl !== 'object') {
        console.error('‚ùå –ù–µ–≤–∞–ª–∏–¥–Ω—ã–π DSL –æ–±—ä–µ–∫—Ç');
        return dsl;
    }

    // –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é DSL –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è
    const fixedDSL = JSON.parse(JSON.stringify(dsl));
    let fixesApplied = 0;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –∏—Å–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
    if (!fixedDSL.pages || !Array.isArray(fixedDSL.pages)) {
        console.warn('‚ö†Ô∏è –ù–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü –≤ DSL');
        return fixedDSL;
    }

    for (let pageIndex = 0; pageIndex < fixedDSL.pages.length; pageIndex++) {
        const page = fixedDSL.pages[pageIndex];

        if (!page.elements || !Array.isArray(page.elements)) {
            continue;
        }

        for (let elementIndex = 0; elementIndex < page.elements.length; elementIndex++) {
            const element = page.elements[elementIndex];

            if (element.type === 'text' && element.content) {
                const fixes = fixTextElement(element, pageIndex + 1, elementIndex + 1);
                fixesApplied += fixes;
            }

            if (element.type === 'chart' && element.content) {
                const fixes = fixChartElement(element, pageIndex + 1, elementIndex + 1);
                fixesApplied += fixes;
            }
        }
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—â–µ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞
    const documentFixes = fixDocumentDirection(fixedDSL);
    fixesApplied += documentFixes;

    console.log(`‚úÖ –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û. –ü—Ä–∏–º–µ–Ω–µ–Ω–æ ${fixesApplied} –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π`);

    return fixedDSL;
};

/**
 * –ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç
 */
const fixTextElement = (element: DSLElement, pageNum: number, elementNum: number): number => {
    let fixes = 0;
    const content = String(element.content || '');

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∞—Ä–∞–±—Å–∫–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤
    const hasArabic = /[\u0600-\u06FF\u0750-\u077F\u08A0-\u08FF]/.test(content);
    const hasRussian = /[–∞-—è—ë]/i.test(content);

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º style –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    if (!element.style) {
        element.style = {};
        fixes++;
    }

    if (hasArabic) {
        console.log(`üîç –ù–∞–π–¥–µ–Ω –∞—Ä–∞–±—Å–∫–∏–π —Ç–µ–∫—Å—Ç –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ ${pageNum}, —ç–ª–µ–º–µ–Ω—Ç ${elementNum}: "${content.substring(0, 40)}..."`);

        // –í–ê–ñ–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º DejaVuSans (–∫–∞–∫ –≤ —Ä–∞–±–æ—á–µ–º —Ç–µ—Å—Ç–µ), –∞ –Ω–µ NotoSansArabic
        if (!element.style.font || !['DejaVuSans', 'DejaVuSans-Bold', 'NotoSansArabic'].includes(element.style.font)) {
            console.log(`üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –£—Å—Ç–∞–Ω–æ–≤–∫–∞ DejaVuSans –¥–ª—è –∞—Ä–∞–±—Å–∫–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ (–ø–æ –æ–±—Ä–∞–∑—Ü—É —Ä–∞–±–æ—á–µ–≥–æ —Ç–µ—Å—Ç–∞)`);
            element.style.font = 'DejaVuSans';
            fixes++;
        }

        // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
        if (!element.style.direction || element.style.direction !== 'rtl') {
            console.log(`üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –£—Å—Ç–∞–Ω–æ–≤–∫–∞ direction=rtl –¥–ª—è –∞—Ä–∞–±—Å–∫–æ–≥–æ —Ç–µ–∫—Å—Ç–∞`);
            element.style.direction = 'rtl';
            fixes++;
        }

        // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ
        if (!element.style.align) {
            console.log(`üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –£—Å—Ç–∞–Ω–æ–≤–∫–∞ align=right –¥–ª—è –∞—Ä–∞–±—Å–∫–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ (–Ω–µ –±—ã–ª–æ align)`);
            element.style.align = 'right';
            fixes++;
        } else if (element.style.align === 'left') {
            console.log(`üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ò–∑–º–µ–Ω–µ–Ω–∏–µ align —Å left –Ω–∞ right –¥–ª—è –∞—Ä–∞–±—Å–∫–æ–≥–æ —Ç–µ–∫—Å—Ç–∞`);
            element.style.align = 'right';
            fixes++;
        }
        // –û—Å—Ç–∞–≤–ª—è–µ–º center –∫–∞–∫ –µ—Å—Ç—å, –µ—Å–ª–∏ –∑–∞–¥–∞–Ω

    } else {
        // –î–ª—è –Ω–µ-–∞—Ä–∞–±—Å–∫–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
        if (!element.style.font) {
            if (hasRussian) {
                console.log(`üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –£—Å—Ç–∞–Ω–æ–≤–∫–∞ DejaVuSans –¥–ª—è —Ä—É—Å—Å–∫–æ–≥–æ —Ç–µ–∫—Å—Ç–∞`);
                element.style.font = 'DejaVuSans';
            } else {
                console.log(`üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –£—Å—Ç–∞–Ω–æ–≤–∫–∞ DejaVuSans –¥–ª—è –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ —Ç–µ–∫—Å—Ç–∞`);
                element.style.font = 'DejaVuSans';
            }
            fixes++;
        }

        if (!element.style.direction) {
            element.style.direction = 'ltr';
            fixes++;
        }
    }

    return fixes;
};

/**
 * –ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç —ç–ª–µ–º–µ–Ω—Ç –≥—Ä–∞—Ñ–∏–∫–∞
 */
const fixChartElement = (element: DSLElement, pageNum: number, elementNum: number): number => {
    let fixes = 0;
    const chart = element.content;

    if (!chart) {
        return fixes;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –≥—Ä–∞—Ñ–∏–∫–∞
    if (chart.title) {
        const hasArabic = /[\u0600-\u06FF\u0750-\u077F\u08A0-\u08FF]/.test(chart.title);

        if (hasArabic) {
            console.log(`üîç –ù–∞–π–¥–µ–Ω –∞—Ä–∞–±—Å–∫–∏–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ –≥—Ä–∞—Ñ–∏–∫–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ ${pageNum}, —ç–ª–µ–º–µ–Ω—Ç ${elementNum}: "${chart.title}"`);

            if (!chart.options) {
                chart.options = {};
                fixes++;
            }

            if (!chart.options.rtl) {
                console.log(`üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –£—Å—Ç–∞–Ω–æ–≤–∫–∞ rtl=true –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞ —Å –∞—Ä–∞–±—Å–∫–∏–º –∑–∞–≥–æ–ª–æ–≤–∫–æ–º`);
                chart.options.rtl = true;
                fixes++;
            }

            if (!chart.options.font || chart.options.font.family !== 'DejaVuSans') {
                console.log(`üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –£—Å—Ç–∞–Ω–æ–≤–∫–∞ DejaVuSans –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞ —Å –∞—Ä–∞–±—Å–∫–∏–º –∑–∞–≥–æ–ª–æ–≤–∫–æ–º`);
                chart.options.font = { family: 'DejaVuSans' };
                fixes++;
            }

            // –î–æ–±–∞–≤–ª—è–µ–º textDirection –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å —Ä–∞–±–æ—á–∏–º —Ç–µ—Å—Ç–æ–º
            if (!chart.textDirection) {
                chart.textDirection = 'rtl';
                fixes++;
            }
        }
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∏ –¥–∞–Ω–Ω—ã—Ö
    if (chart.data && chart.data.labels && Array.isArray(chart.data.labels)) {
        const hasArabicLabels = chart.data.labels.some((label: string) =>
            typeof label === 'string' && /[\u0600-\u06FF\u0750-\u077F\u08A0-\u08FF]/.test(label)
        );

        if (hasArabicLabels) {
            console.log(`üîç –ù–∞–π–¥–µ–Ω—ã –∞—Ä–∞–±—Å–∫–∏–µ –ø–æ–¥–ø–∏—Å–∏ –≤ –≥—Ä–∞—Ñ–∏–∫–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ ${pageNum}, —ç–ª–µ–º–µ–Ω—Ç ${elementNum}`);

            if (!chart.options) {
                chart.options = {};
                fixes++;
            }

            if (!chart.options.rtl) {
                console.log(`üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –£—Å—Ç–∞–Ω–æ–≤–∫–∞ rtl=true –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞ —Å –∞—Ä–∞–±—Å–∫–∏–º–∏ –ø–æ–¥–ø–∏—Å—è–º–∏`);
                chart.options.rtl = true;
                fixes++;
            }

            if (!chart.options.font || chart.options.font.family !== 'DejaVuSans') {
                console.log(`üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –£—Å—Ç–∞–Ω–æ–≤–∫–∞ DejaVuSans –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞ —Å –∞—Ä–∞–±—Å–∫–∏–º–∏ –ø–æ–¥–ø–∏—Å—è–º–∏`);
                chart.options.font = { family: 'DejaVuSans' };
                fixes++;
            }

            // –î–æ–±–∞–≤–ª—è–µ–º textDirection –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å —Ä–∞–±–æ—á–∏–º —Ç–µ—Å—Ç–æ–º
            if (!chart.textDirection) {
                chart.textDirection = 'rtl';
                fixes++;
            }
        }
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∏ –¥–∞—Ç–∞—Å–µ—Ç–æ–≤
    if (chart.data && chart.data.datasets && Array.isArray(chart.data.datasets)) {
        for (const dataset of chart.data.datasets) {
            if (dataset.label && typeof dataset.label === 'string') {
                const hasArabic = /[\u0600-\u06FF\u0750-\u077F\u08A0-\u08FF]/.test(dataset.label);

                if (hasArabic) {
                    console.log(`üîç –ù–∞–π–¥–µ–Ω–∞ –∞—Ä–∞–±—Å–∫–∞—è –ø–æ–¥–ø–∏—Å—å –¥–∞—Ç–∞—Å–µ—Ç–∞: "${dataset.label}"`);

                    if (!chart.options) {
                        chart.options = {};
                        fixes++;
                    }

                    if (!chart.options.rtl) {
                        console.log(`üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –£—Å—Ç–∞–Ω–æ–≤–∫–∞ rtl=true –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞ —Å –∞—Ä–∞–±—Å–∫–æ–π –ø–æ–¥–ø–∏—Å—å—é –¥–∞—Ç–∞—Å–µ—Ç–∞`);
                        chart.options.rtl = true;
                        fixes++;
                    }

                    if (!chart.options.font || chart.options.font.family !== 'DejaVuSans') {
                        console.log(`üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –£—Å—Ç–∞–Ω–æ–≤–∫–∞ DejaVuSans –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞ —Å –∞—Ä–∞–±—Å–∫–æ–π –ø–æ–¥–ø–∏—Å—å—é –¥–∞—Ç–∞—Å–µ—Ç–∞`);
                        chart.options.font = { family: 'DejaVuSans' };
                        fixes++;
                    }

                    // –î–æ–±–∞–≤–ª—è–µ–º textDirection –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å —Ä–∞–±–æ—á–∏–º —Ç–µ—Å—Ç–æ–º
                    if (!chart.textDirection) {
                        chart.textDirection = 'rtl';
                        fixes++;
                    }
                }
            }
        }
    }

    return fixes;
};

/**
 * –ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç –æ–±—â–µ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞
 */
const fixDocumentDirection = (dsl: any): number => {
    let fixes = 0;

    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤–µ—Å—å —Ç–µ–∫—Å—Ç –≤ –¥–æ–∫—É–º–µ–Ω—Ç–µ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø—Ä–µ–æ–±–ª–∞–¥–∞—é—â–µ–≥–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    let arabicTextCount = 0;
    let totalTextElements = 0;

    if (dsl.pages && Array.isArray(dsl.pages)) {
        for (const page of dsl.pages) {
            if (page.elements && Array.isArray(page.elements)) {
                for (const element of page.elements) {
                    if (element.type === 'text' && element.content) {
                        totalTextElements++;
                        const content = String(element.content);
                        if (/[\u0600-\u06FF\u0750-\u077F\u08A0-\u08FF]/.test(content)) {
                            arabicTextCount++;
                        }
                    }
                }
            }
        }
    }

    // –ï—Å–ª–∏ –±–æ–ª—å—à–µ 50% —Ç–µ–∫—Å—Ç–∞ - –∞—Ä–∞–±—Å–∫–∏–π, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º RTL –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    if (totalTextElements > 0 && arabicTextCount / totalTextElements > 0.5) {
        if (!dsl.defaultDirection || dsl.defaultDirection !== 'rtl') {
            console.log(`üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –£—Å—Ç–∞–Ω–æ–≤–∫–∞ defaultDirection=rtl (–∞—Ä–∞–±—Å–∫–∏–π —Ç–µ–∫—Å—Ç –ø—Ä–µ–æ–±–ª–∞–¥–∞–µ—Ç: ${arabicTextCount}/${totalTextElements})`);
            dsl.defaultDirection = 'rtl';
            fixes++;
        }
    } else {
        if (!dsl.defaultDirection) {
            console.log(`üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –£—Å—Ç–∞–Ω–æ–≤–∫–∞ defaultDirection=ltr –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é`);
            dsl.defaultDirection = 'ltr';
            fixes++;
        }
    }

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º defaultFont –∫–∞–∫ –≤ —Ä–∞–±–æ—á–µ–º —Ç–µ—Å—Ç–µ
    if (!dsl.defaultFont) {
        console.log(`üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –£—Å—Ç–∞–Ω–æ–≤–∫–∞ defaultFont=DejaVuSans (–∫–∞–∫ –≤ —Ä–∞–±–æ—á–µ–º —Ç–µ—Å—Ç–µ)`);
        dsl.defaultFont = 'DejaVuSans';
        fixes++;
    }

    return fixes;
};

/**
 * Express middleware –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è DSL
 */
export const dslAutoFixerMiddleware = (req: any, res: any, next: any) => {
    if (req.body && req.body.dsl) {
        console.log('üîß –ü—Ä–∏–º–µ–Ω—è–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ DSL —á–µ—Ä–µ–∑ middleware...');
        req.body.dsl = autoFixDSL(req.body.dsl);
    }
    next();
};