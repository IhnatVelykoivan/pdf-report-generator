import { Request, Response } from 'express';
import { validateDSL } from '../validation/dslValidator';
import { renderDSLToPDF } from '../engine/renderer';
import { convertPDFToImages } from '../engine/images/imageConverter';
import { getAvailableTemplates } from '../engine/templates/templateRenderer';

/*** Health check endpoint*/
export const healthCheck = (_req: Request, res: Response) => {
    res.status(200).json({
        status: 'ok',
        service: 'pdf-renderer',
        timestamp: new Date().toISOString()
    });
};

/*** Controller for getting available templates*/
export const getTemplates = (_req: Request, res: Response) => {
    const templates = getAvailableTemplates();
    res.status(200).json({
        templates
    });
};

/*** Controller for rendering DSL to PDF with enhanced logging*/
export const renderPDF = async (req: Request, res: Response) => {
    try {
        const { dsl } = req.body;

        console.log('üìä –ù–ê–ß–ò–ù–ê–ï–ú –û–ë–†–ê–ë–û–¢–ö–£ DSL –¥–ª—è PDF —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞...');

        // –õ–æ–≥–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ DSL –ø–æ—Å–ª–µ –∞–≤—Ç–æ—Ñ–∏–∫—Å–∞
        if (dsl && dsl.pages) {
            console.log(`üìÑ DSL —Å–æ–¥–µ—Ä–∂–∏—Ç ${dsl.pages.length} —Å—Ç—Ä–∞–Ω–∏—Ü`);
            console.log(`üìÑ DSL defaultDirection: ${dsl.defaultDirection || '–Ω–µ –∑–∞–¥–∞–Ω–æ'}`);
            console.log(`üìÑ DSL defaultFont: ${dsl.defaultFont || '–Ω–µ –∑–∞–¥–∞–Ω–æ'}`);

            let totalElements = 0;
            let arabicElements = 0;
            let fixedElements = 0;

            for (let i = 0; i < dsl.pages.length; i++) {
                const page = dsl.pages[i];
                if (page.elements) {
                    totalElements += page.elements.length;

                    for (const element of page.elements) {
                        if (element.type === 'text' && element.content) {
                            const hasArabic = /[\u0600-\u06FF\u0750-\u077F\u08A0-\u08FF]/.test(element.content);
                            if (hasArabic) {
                                arabicElements++;

                                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–∏–º–µ–Ω–µ–Ω—ã –ª–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
                                if (element.style &&
                                    element.style.font &&
                                    ['DejaVuSans', 'DejaVuSans-Bold', 'NotoSansArabic'].includes(element.style.font) &&
                                    element.style.direction === 'rtl') {
                                    fixedElements++;
                                }

                                console.log(`üîç –ê—Ä–∞–±—Å–∫–∏–π —ç–ª–µ–º–µ–Ω—Ç: "${element.content.substring(0, 30)}..." -> font=${element.style?.font}, direction=${element.style?.direction}, align=${element.style?.align}`);
                            }
                        }

                        if (element.type === 'chart' && element.content) {
                            const chart = element.content;
                            if (chart.title && /[\u0600-\u06FF\u0750-\u077F\u08A0-\u08FF]/.test(chart.title)) {
                                console.log(`üìä –ê—Ä–∞–±—Å–∫–∏–π –≥—Ä–∞—Ñ–∏–∫: "${chart.title}" -> rtl=${chart.options?.rtl}, font=${chart.options?.font?.family}, textDirection=${chart.textDirection}`);
                            }
                        }
                    }
                }
            }

            console.log(`üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ DSL:`);
            console.log(`   - –í—Å–µ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤: ${totalElements}`);
            console.log(`   - –ê—Ä–∞–±—Å–∫–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã: ${arabicElements}`);
            console.log(`   - –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –∞—Ä–∞–±—Å–∫–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã: ${fixedElements}`);

            if (arabicElements > 0 && fixedElements < arabicElements) {
                console.warn(`‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: ${arabicElements - fixedElements} –∞—Ä–∞–±—Å–∫–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –º–æ–≥—É—Ç –±—ã—Ç—å –Ω–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω—ã!`);
            } else if (arabicElements > 0) {
                console.log(`‚úÖ –í—Å–µ ${arabicElements} –∞—Ä–∞–±—Å–∫–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã`);
            }
        }

        // Validate DSL (—Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º–∏ –≤–Ω—É—Ç—Ä–∏)
        const validationResult = validateDSL(dsl);
        if (!validationResult.valid) {
            console.error('‚ùå DSL –≤–∞–ª–∏–¥–∞—Ü–∏—è –Ω–µ –ø—Ä–æ—à–ª–∞:', validationResult.errors);
            return res.status(400).json({
                error: true,
                message: 'Invalid DSL',
                details: validationResult.errors
            });
        }

        console.log('‚úÖ DSL –≤–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ');

        // Render DSL to PDF
        console.log('üé® –ù–∞—á–∏–Ω–∞–µ–º —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥ PDF...');
        const pdfBuffer = await renderDSLToPDF(dsl);

        console.log(`‚úÖ PDF —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω. –†–∞–∑–º–µ—Ä: ${pdfBuffer.length} –±–∞–π—Ç`);

        // Set response headers
        res.setHeader('Content-Type', 'application/pdf');
        res.setHeader('Content-Disposition', 'attachment; filename=rendered-document.pdf');

        // Send PDF buffer
        res.send(pdfBuffer);
    } catch (error) {
        console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ PDF:', error);
        res.status(500).json({
            error: true,
            message: 'Failed to render PDF',
            details: error instanceof Error ? error.message : 'Unknown error'
        });
    }
};

/*** Controller for rendering DSL to images with enhanced logging*/
export const renderPDFToImages = async (req: Request, res: Response) => {
    try {
        const { dsl, dpi = 300 } = req.body;

        console.log('üñºÔ∏è –ù–ê–ß–ò–ù–ê–ï–ú –û–ë–†–ê–ë–û–¢–ö–£ DSL –¥–ª—è —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ –≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è...');

        // Validate DSL (—Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º–∏ –≤–Ω—É—Ç—Ä–∏)
        const validationResult = validateDSL(dsl);
        if (!validationResult.valid) {
            console.error('‚ùå DSL –≤–∞–ª–∏–¥–∞—Ü–∏—è –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –Ω–µ –ø—Ä–æ—à–ª–∞:', validationResult.errors);
            return res.status(400).json({
                error: true,
                message: 'Invalid DSL',
                details: validationResult.errors
            });
        }

        console.log('‚úÖ DSL –≤–∞–ª–∏–¥–∞—Ü–∏—è –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ');

        // Render DSL to PDF
        console.log('üé® –ù–∞—á–∏–Ω–∞–µ–º —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥ PDF –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è...');
        const pdfBuffer = await renderDSLToPDF(dsl);

        // Convert PDF to images
        console.log(`üîÑ –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º PDF (${pdfBuffer.length} –±–∞–π—Ç) –≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å DPI=${dpi}...`);
        const images = await convertPDFToImages(pdfBuffer, dpi);

        console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ ${images.length} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π`);

        // Send images
        res.json({
            success: true,
            message: 'PDF rendered to images successfully',
            images: images
        });
    } catch (error) {
        console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ PDF –≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:', error);
        res.status(500).json({
            error: true,
            message: 'Failed to render PDF to images',
            details: error instanceof Error ? error.message : 'Unknown error'
        });
    }
};