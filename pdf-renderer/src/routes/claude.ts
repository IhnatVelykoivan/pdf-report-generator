import express from 'express';
import axios from 'axios';

const router = express.Router();

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã –¥–ª—è —Ç–∏–ø–∏–∑–∞—Ü–∏–∏
interface ChatMessage {
    role: 'user' | 'assistant';
    content: string;
}

interface ClaudeRequest {
    messages: ChatMessage[];
    systemPrompt?: string;
    maxTokens?: number;
}

interface DSLGenerationRequest {
    conversationHistory: ChatMessage[];
}

interface FeedbackRequest {
    currentDSL: any;
    userFeedback: string;
}

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –æ—Ç–≤–µ—Ç–∞ Claude API
interface ClaudeResponse {
    content: Array<{
        text: string;
        type: string;
    }>;
    id: string;
    model: string;
    role: string;
    stop_reason: string;
    stop_sequence: null;
    type: string;
    usage: {
        input_tokens: number;
        output_tokens: number;
    };
}

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Claude API
const CLAUDE_API_URL = 'https://api.anthropic.com/v1/messages';
const CLAUDE_API_KEY = process.env.CLAUDE_API_KEY;

if (!CLAUDE_API_KEY) {
    console.warn('‚ö†Ô∏è CLAUDE_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è');
}

// –ë–∞–∑–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –∫ Claude API
async function callClaudeAPI(messages: ChatMessage[], systemPrompt: string, maxTokens = 4000): Promise<string> {
    try {
        console.log('ü§ñ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ Claude API...');

        const response = await axios.post<ClaudeResponse>(CLAUDE_API_URL, {
            model: 'claude-3-sonnet-20240229',
            max_tokens: maxTokens,
            messages: messages,
            system: systemPrompt
        }, {
            headers: {
                'Content-Type': 'application/json',
                'x-api-key': CLAUDE_API_KEY,
                'anthropic-version': '2023-06-01'
            }
        });

        console.log('‚úÖ –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç Claude');
        return response.data.content[0].text;
    } catch (error: any) {
        console.error('‚ùå –û—à–∏–±–∫–∞ Claude API:', error);

        if (error.response) {
            // Axios error with response
            const statusCode = error.response.status || 500;
            const errorMessage = error.response.data?.error?.message || error.message || 'Unknown error';
            throw new Error(`Claude API Error: ${statusCode} - ${errorMessage}`);
        } else if (error.request) {
            // Axios error without response
            throw new Error(`Network Error: ${error.message || 'No response from server'}`);
        } else {
            // Other error
            throw new Error(`Request Error: ${error.message || 'Unknown error'}`);
        }
    }
}

// –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
router.post('/chat', async (req, res) => {
    try {
        const { messages, systemPrompt }: ClaudeRequest = req.body;

        if (!messages || !Array.isArray(messages)) {
            return res.status(400).json({ error: '–ù–µ–æ–±—Ö–æ–¥–∏–º –º–∞—Å—Å–∏–≤ —Å–æ–æ–±—â–µ–Ω–∏–π' });
        }

        const defaultSystemPrompt = `–¢—ã - —ç–∫—Å–ø–µ—Ä—Ç –ø–æ —Å–æ–∑–¥–∞–Ω–∏—é PDF –æ—Ç—á—ë—Ç–æ–≤. –¢–≤–æ—è –∑–∞–¥–∞—á–∞:

1. –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∑–∞–ø—Ä–æ—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—á—ë—Ç–æ–≤
2. –ó–∞–¥–∞–≤–∞—Ç—å —É—Ç–æ—á–Ω—è—é—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è –ª—É—á—à–µ–≥–æ –ø–æ–Ω–∏–º–∞–Ω–∏—è —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π  
3. –ü—Ä–µ–¥–ª–∞–≥–∞—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∏ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –æ—Ç—á—ë—Ç–∞
4. –ë—ã—Ç—å –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–º –∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–º

–û—Ç–≤–µ—á–∞–π –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ. –ò—Å–ø–æ–ª—å–∑—É–π —ç–º–æ–¥–∑–∏ –¥–ª—è –ª—É—á—à–µ–≥–æ –≤–æ—Å–ø—Ä–∏—è—Ç–∏—è.

–ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ—Å–∏—Ç —Å–æ–∑–¥–∞—Ç—å –æ—Ç—á—ë—Ç, –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —É—Ç–æ—á–Ω–∏:
- –¢–∏–ø –æ—Ç—á—ë—Ç–∞ (–º–∞—Ä–∫–µ—Ç–∏–Ω–≥, –ø—Ä–æ–¥–∞–∂–∏, —Ñ–∏–Ω–∞–Ω—Å—ã, –∞–Ω–∞–ª–∏—Ç–∏–∫–∞)
- –ü–µ—Ä–∏–æ–¥ –æ—Ç—á—ë—Ç–∞
- –¶–µ–ª–µ–≤—É—é –∞—É–¥–∏—Ç–æ—Ä–∏—é
- –ö–ª—é—á–µ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –∏–ª–∏ –¥–∞–Ω–Ω—ã–µ
- –Ø–∑—ã–∫ –æ—Ç—á—ë—Ç–∞

–ü—Ä–µ–¥–ª–∞–≥–∞–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –∏ –±—É–¥—å –≥–æ—Ç–æ–≤ —Å–æ–∑–¥–∞—Ç—å DSL —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–ª—è PDF –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞.`;

        const response = await callClaudeAPI(
            messages,
            systemPrompt || defaultSystemPrompt
        );

        res.json({ response });
    } catch (error: any) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –≤ /chat:', error);
        res.status(500).json({
            error: error.message || '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
        });
    }
});

// –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ DSL
router.post('/generate-dsl', async (req, res) => {
    try {
        const { conversationHistory }: DSLGenerationRequest = req.body;

        if (!conversationHistory || !Array.isArray(conversationHistory)) {
            return res.status(400).json({ error: '–ù–µ–æ–±—Ö–æ–¥–∏–º–∞ –∏—Å—Ç–æ—Ä–∏—è —Ä–∞–∑–≥–æ–≤–æ—Ä–∞' });
        }

        const systemPrompt = `–¢—ã - —ç–∫—Å–ø–µ—Ä—Ç –ø–æ —Å–æ–∑–¥–∞–Ω–∏—é DSL (Domain Specific Language) —Å—Ç—Ä—É–∫—Ç—É—Ä –¥–ª—è PDF –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞.

–ù–∞ –æ—Å–Ω–æ–≤–µ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º —Å–æ–∑–¥–∞–π JSON —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ PDF –æ—Ç—á—ë—Ç–∞.

–°—Ç—Ä—É–∫—Ç—É—Ä–∞ DSL –¥–æ–ª–∂–Ω–∞ –≤–∫–ª—é—á–∞—Ç—å:
- template: —Ç–∏–ø —à–∞–±–ª–æ–Ω–∞
- defaultDirection: –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ text (ltr/rtl)
- pages: –º–∞—Å—Å–∏–≤ —Å—Ç—Ä–∞–Ω–∏—Ü —Å —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏

–ö–∞–∂–¥—ã–π —ç–ª–µ–º–µ–Ω—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã –º–æ–∂–µ—Ç –±—ã—Ç—å:
- text: —Ç–µ–∫—Å—Ç–æ–≤—ã–π –±–ª–æ–∫
- chart: –≥—Ä–∞—Ñ–∏–∫ –∏–ª–∏ –¥–∏–∞–≥—Ä–∞–º–º–∞  
- table: —Ç–∞–±–ª–∏—Ü–∞
- image: –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ

–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —É—á–∏—Ç—ã–≤–∞–π:
1. –Ø–∑—ã–∫ —Ç–µ–∫—Å—Ç–∞ (—Ä—É—Å—Å–∫–∏–π/–∞–Ω–≥–ª–∏–π—Å–∫–∏–π/–∞—Ä–∞–±—Å–∫–∏–π)
2. –¢–∏–ø –æ—Ç—á—ë—Ç–∞ (–º–∞—Ä–∫–µ—Ç–∏–Ω–≥/–ø—Ä–æ–¥–∞–∂–∏/—Ñ–∏–Ω–∞–Ω—Å—ã)
3. –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

–û—Ç–≤–µ—Ç—å –¢–û–õ–¨–ö–û –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON:
{
    "dsl": { DSL —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ },
    "explanation": "–û–±—ä—è—Å–Ω–µ–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –æ—Ç—á—ë—Ç–∞",
    "suggestions": ["–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ 1", "–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ 2"]
}`;

        const conversationText = conversationHistory
            .map(msg => `${msg.role}: ${msg.content}`)
            .join('\n\n');

        const prompt = `–ê–Ω–∞–ª–∏–∑–∏—Ä—É–π —ç—Ç–æ—Ç —Ä–∞–∑–≥–æ–≤–æ—Ä –∏ —Å–æ–∑–¥–∞–π DSL —Å—Ç—Ä—É–∫—Ç—É—Ä—É:

${conversationText}

–°–æ–∑–¥–∞–π –ø–æ–¥—Ä–æ–±–Ω—É—é DSL —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–ª—è PDF –æ—Ç—á—ë—Ç–∞.`;

        const response = await callClaudeAPI([
            { role: 'user', content: prompt }
        ], systemPrompt);

        // –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å JSON –∏–∑ –æ—Ç–≤–µ—Ç–∞
        try {
            const jsonMatch = response.match(/\{[\s\S]*\}/);
            if (jsonMatch) {
                const result = JSON.parse(jsonMatch[0]);
                res.json(result);
            } else {
                // –°–æ–∑–¥–∞—ë–º fallback DSL
                res.json(createFallbackDSL(conversationHistory));
            }
        } catch (parseError) {
            console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback');
            res.json(createFallbackDSL(conversationHistory));
        }

    } catch (error: any) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –≤ /generate-dsl:', error);
        res.status(500).json({
            error: error.message || '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
        });
    }
});

// –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∏–¥–±–µ–∫–∞
router.post('/feedback', async (req, res) => {
    try {
        const { currentDSL, userFeedback }: FeedbackRequest = req.body;

        if (!currentDSL || !userFeedback) {
            return res.status(400).json({ error: '–ù–µ–æ–±—Ö–æ–¥–∏–º—ã currentDSL –∏ userFeedback' });
        }

        const systemPrompt = `–¢—ã - —ç–∫—Å–ø–µ—Ä—Ç –ø–æ —É–ª—É—á—à–µ–Ω–∏—é PDF –æ—Ç—á—ë—Ç–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ñ–∏–¥–±–µ–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.

–ü–æ–ª—É—á–∏ —Ç–µ–∫—É—â—É—é DSL —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∏ —Ñ–∏–¥–±–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∑–∞—Ç–µ–º –ø—Ä–µ–¥–ª–æ–∂–∏ —É–ª—É—á—à–µ–Ω–∏—è.

–û—Ç–≤–µ—Ç—å –¢–û–õ–¨–ö–û –≤ JSON —Ñ–æ—Ä–º–∞—Ç–µ:
{
    "dsl": { –æ–±–Ω–æ–≤–ª—ë–Ω–Ω–∞—è DSL —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ },
    "explanation": "–û–±—ä—è—Å–Ω–µ–Ω–∏–µ –≤–Ω–µ—Å—ë–Ω–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π",
    "suggestions": ["–¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ 1", "–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ 2"]
}`;

        const prompt = `–¢–µ–∫—É—â–∞—è DSL —Å—Ç—Ä—É–∫—Ç—É—Ä–∞:
${JSON.stringify(currentDSL, null, 2)}

–§–∏–¥–±–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:
${userFeedback}

–£–ª—É—á—à–∏ DSL —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Å–æ–≥–ª–∞—Å–Ω–æ —Ñ–∏–¥–±–µ–∫—É.`;

        const response = await callClaudeAPI([
            { role: 'user', content: prompt }
        ], systemPrompt);

        try {
            const jsonMatch = response.match(/\{[\s\S]*\}/);
            if (jsonMatch) {
                const result = JSON.parse(jsonMatch[0]);
                res.json(result);
            } else {
                res.json({
                    dsl: currentDSL,
                    explanation: '–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ñ–∏–¥–±–µ–∫, —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Å—Ç–∞–ª–∞—Å—å –ø—Ä–µ–∂–Ω–µ–π',
                    suggestions: ['–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –∑–∞–ø—Ä–æ—Å']
                });
            }
        } catch (parseError) {
            res.json({
                dsl: currentDSL,
                explanation: '–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ñ–∏–¥–±–µ–∫, —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Å—Ç–∞–ª–∞—Å—å –ø—Ä–µ–∂–Ω–µ–π',
                suggestions: ['–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –∑–∞–ø—Ä–æ—Å']
            });
        }

    } catch (error: any) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –≤ /feedback:', error);
        res.status(500).json({
            error: error.message || '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
        });
    }
});

// –£—Ç–∏–ª–∏—Ç–∞—Ä–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è fallback DSL
function createFallbackDSL(conversationHistory: ChatMessage[]) {
    const lastUserMessage = conversationHistory
        .filter(msg => msg.role === 'user')
        .pop()?.content || '–ë–∞–∑–æ–≤—ã–π –æ—Ç—á—ë—Ç';

    const language = detectLanguage(lastUserMessage);
    const reportType = detectReportType(lastUserMessage);

    return {
        dsl: {
            template: 'default',
            defaultDirection: language === 'arabic' ? 'rtl' : 'ltr',
            pages: [{
                elements: [
                    {
                        type: 'text',
                        content: extractTitle(lastUserMessage),
                        position: { x: 100, y: 100 },
                        style: {
                            font: language === 'arabic' ? 'NotoSansArabic' : 'DejaVuSans',
                            fontSize: 24,
                            color: '#2C3E50',
                            width: 400,
                            align: 'center'
                        }
                    },
                    {
                        type: 'text',
                        content: generateContent(reportType, language),
                        position: { x: 80, y: 200 },
                        style: {
                            font: language === 'arabic' ? 'NotoSansArabic' : 'DejaVuSans',
                            fontSize: 12,
                            color: '#34495E',
                            width: 450,
                            lineBreak: true
                        }
                    }
                ]
            }]
        },
        explanation: `–°–æ–∑–¥–∞–Ω ${reportType} –æ—Ç—á—ë—Ç –Ω–∞ ${language === 'russian' ? '—Ä—É—Å—Å–∫–æ–º' : language === 'english' ? '–∞–Ω–≥–ª–∏–π—Å–∫–æ–º' : '–∞—Ä–∞–±—Å–∫–æ–º'} —è–∑—ã–∫–µ`,
        suggestions: [
            '–î–æ–±–∞–≤–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫–∏ –∏ –¥–∏–∞–≥—Ä–∞–º–º—ã',
            '–í–∫–ª—é—á–∏—Ç—å –±–æ–ª—å—à–µ —Ä–∞–∑–¥–µ–ª–æ–≤',
            '–ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∏–ª—å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è'
        ]
    };
}

// –£—Ç–∏–ª–∏—Ç–∞—Ä–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
function detectLanguage(text: string): 'russian' | 'english' | 'arabic' {
    if (/[\u0600-\u06FF]/.test(text)) return 'arabic';
    if (/[–∞-—è—ë]/i.test(text)) return 'russian';
    return 'english';
}

function detectReportType(text: string): string {
    const lower = text.toLowerCase();
    if (lower.includes('–º–∞—Ä–∫–µ—Ç–∏–Ω–≥') || lower.includes('marketing')) return 'marketing';
    if (lower.includes('–ø—Ä–æ–¥–∞–∂') || lower.includes('sales')) return 'sales';
    if (lower.includes('—Ñ–∏–Ω–∞–Ω—Å') || lower.includes('financial')) return 'financial';
    if (lower.includes('–∞–Ω–∞–ª–∏—Ç–∏–∫') || lower.includes('analytics')) return 'analytics';
    return 'general';
}

function extractTitle(text: string): string {
    const words = text.split(' ').slice(0, 6);
    return words.join(' ') + (text.split(' ').length > 6 ? '...' : '');
}

function generateContent(reportType: string, language: string): string {
    const content = {
        russian: {
            marketing: '–ú–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤—ã–π –æ—Ç—á—ë—Ç —Å –∞–Ω–∞–ª–∏–∑–æ–º –∫–∞–º–ø–∞–Ω–∏–π –∏ ROI',
            sales: '–û—Ç—á—ë—Ç –ø–æ –ø—Ä–æ–¥–∞–∂–∞–º —Å –¥–∏–Ω–∞–º–∏–∫–æ–π –∏ –ø—Ä–æ–≥–Ω–æ–∑–∞–º–∏',
            financial: '–§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –æ—Ç—á—ë—Ç —Å –ø–æ–∫–∞–∑–∞—Ç–µ–ª—è–º–∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏',
            analytics: '–ê–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–π –æ—Ç—á—ë—Ç —Å —Ç—Ä–µ–Ω–¥–∞–º–∏ –∏ –∏–Ω—Å–∞–π—Ç–∞–º–∏',
            general: '–û–±—â–∏–π –æ—Ç—á—ë—Ç —Å –∫–ª—é—á–µ–≤—ã–º–∏ –ø–æ–∫–∞–∑–∞—Ç–µ–ª—è–º–∏'
        },
        english: {
            marketing: 'Marketing report with campaign analysis and ROI',
            sales: 'Sales report with dynamics and forecasts',
            financial: 'Financial report with performance metrics',
            analytics: 'Analytics report with trends and insights',
            general: 'General report with key indicators'
        },
        arabic: {
            marketing: 'ÿ™ŸÇÿ±Ÿäÿ± ÿ™ÿ≥ŸàŸäŸÇŸä ŸÖÿπ ÿ™ÿ≠ŸÑŸäŸÑ ÿßŸÑÿ≠ŸÖŸÑÿßÿ™ ŸàÿßŸÑÿπÿßÿ¶ÿØ ÿπŸÑŸâ ÿßŸÑÿßÿ≥ÿ™ÿ´ŸÖÿßÿ±',
            sales: 'ÿ™ŸÇÿ±Ÿäÿ± ÿßŸÑŸÖÿ®Ÿäÿπÿßÿ™ ŸÖÿπ ÿßŸÑÿØŸäŸÜÿßŸÖŸäŸÉŸäÿßÿ™ ŸàÿßŸÑÿ™ŸàŸÇÿπÿßÿ™',
            financial: 'ÿ™ŸÇÿ±Ÿäÿ± ŸÖÿßŸÑŸä ŸÖÿπ ŸÖŸÇÿßŸäŸäÿ≥ ÿßŸÑÿ£ÿØÿßÿ°',
            analytics: 'ÿ™ŸÇÿ±Ÿäÿ± ÿ™ÿ≠ŸÑŸäŸÑŸä ŸÖÿπ ÿßŸÑÿßÿ™ÿ¨ÿßŸáÿßÿ™ ŸàÿßŸÑÿ±ÿ§Ÿâ',
            general: 'ÿ™ŸÇÿ±Ÿäÿ± ÿπÿßŸÖ ŸÖÿπ ÿßŸÑŸÖÿ§ÿ¥ÿ±ÿßÿ™ ÿßŸÑÿ±ÿ¶Ÿäÿ≥Ÿäÿ©'
        }
    };

    return content[language as keyof typeof content]?.[reportType as keyof typeof content.russian] ||
        content.russian.general;
}

export default router;