import express from 'express';
import axios from 'axios';

const router = express.Router();

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã –¥–ª—è —Ç–∏–ø–∏–∑–∞—Ü–∏–∏
interface ChatMessage {
    role: 'user' | 'assistant';
    content: string;
}

interface ClaudeRequest {
    messages: ChatMessage[];
    systemPrompt?: string;
    maxTokens?: number;
}

interface DSLGenerationRequest {
    conversationHistory: ChatMessage[];
    expectedLanguage?: 'russian' | 'english' | 'arabic';
}

interface FeedbackRequest {
    currentDSL: any;
    userFeedback: string;
}

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –æ—Ç–≤–µ—Ç–∞ Claude API
interface ClaudeResponse {
    content: Array<{
        text: string;
        type: string;
    }>;
    id: string;
    model: string;
    role: string;
    stop_reason: string;
    stop_sequence: null;
    type: string;
    usage: {
        input_tokens: number;
        output_tokens: number;
    };
}

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Claude API
const CLAUDE_API_URL = 'https://api.anthropic.com/v1/messages';
const CLAUDE_API_KEY = process.env.CLAUDE_API_KEY;

if (!CLAUDE_API_KEY) {
    console.warn('‚ö†Ô∏è CLAUDE_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è');
}

// –ë–∞–∑–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –∫ Claude API
async function callClaudeAPI(messages: ChatMessage[], systemPrompt: string, maxTokens = 4000): Promise<string> {
    try {
        console.log('ü§ñ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ Claude API...');

        const response = await axios.post<ClaudeResponse>(CLAUDE_API_URL, {
            model: 'claude-3-sonnet-20240229',
            max_tokens: maxTokens,
            messages: messages,
            system: systemPrompt
        }, {
            headers: {
                'Content-Type': 'application/json',
                'x-api-key': CLAUDE_API_KEY,
                'anthropic-version': '2023-06-01'
            }
        });

        console.log('‚úÖ –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç Claude');
        return response.data.content[0].text;
    } catch (error: any) {
        console.error('‚ùå –û—à–∏–±–∫–∞ Claude API:', error);

        if (error.response) {
            const statusCode = error.response.status || 500;
            const errorMessage = error.response.data?.error?.message || error.message || 'Unknown error';
            throw new Error(`Claude API Error: ${statusCode} - ${errorMessage}`);
        } else if (error.request) {
            throw new Error(`Network Error: ${error.message || 'No response from server'}`);
        } else {
            throw new Error(`Request Error: ${error.message || 'Unknown error'}`);
        }
    }
}

// –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
router.post('/chat', async (req, res) => {
    try {
        const { messages, systemPrompt }: ClaudeRequest = req.body;

        if (!messages || !Array.isArray(messages)) {
            return res.status(400).json({ error: '–ù–µ–æ–±—Ö–æ–¥–∏–º –º–∞—Å—Å–∏–≤ —Å–æ–æ–±—â–µ–Ω–∏–π' });
        }

        const defaultSystemPrompt = `–¢—ã - —ç–∫—Å–ø–µ—Ä—Ç –ø–æ —Å–æ–∑–¥–∞–Ω–∏—é PDF –æ—Ç—á—ë—Ç–æ–≤. –¢–≤–æ—è –∑–∞–¥–∞—á–∞:

1. –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∑–∞–ø—Ä–æ—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—á—ë—Ç–æ–≤
2. –ó–∞–¥–∞–≤–∞—Ç—å —É—Ç–æ—á–Ω—è—é—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è –ª—É—á—à–µ–≥–æ –ø–æ–Ω–∏–º–∞–Ω–∏—è —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π  
3. –ü—Ä–µ–¥–ª–∞–≥–∞—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∏ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –æ—Ç—á—ë—Ç–∞
4. –ë—ã—Ç—å –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–º –∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–º

–í–ê–ñ–ù–û: –û—Ç–≤–µ—á–∞–π –Ω–∞ —Ç–æ–º —è–∑—ã–∫–µ, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–º –ø–∏—à–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:
- –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–∏—à–µ—Ç –Ω–∞ –∞—Ä–∞–±—Å–∫–æ–º - –æ—Ç–≤–µ—á–∞–π –Ω–∞ –∞—Ä–∞–±—Å–∫–æ–º
- –ï—Å–ª–∏ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º - –æ—Ç–≤–µ—á–∞–π –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º
- –ï—Å–ª–∏ –Ω–∞ —Ä—É—Å—Å–∫–æ–º - –æ—Ç–≤–µ—á–∞–π –Ω–∞ —Ä—É—Å—Å–∫–æ–º

–ò—Å–ø–æ–ª—å–∑—É–π —ç–º–æ–¥–∑–∏ –¥–ª—è –ª—É—á—à–µ–≥–æ –≤–æ—Å–ø—Ä–∏—è—Ç–∏—è.

–ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ—Å–∏—Ç —Å–æ–∑–¥–∞—Ç—å –æ—Ç—á—ë—Ç, –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —É—Ç–æ—á–Ω–∏:
- –¢–∏–ø –æ—Ç—á—ë—Ç–∞ (–º–∞—Ä–∫–µ—Ç–∏–Ω–≥, –ø—Ä–æ–¥–∞–∂–∏, —Ñ–∏–Ω–∞–Ω—Å—ã, –∞–Ω–∞–ª–∏—Ç–∏–∫–∞)
- –ü–µ—Ä–∏–æ–¥ –æ—Ç—á—ë—Ç–∞
- –¶–µ–ª–µ–≤—É—é –∞—É–¥–∏—Ç–æ—Ä–∏—é
- –ö–ª—é—á–µ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –∏–ª–∏ –¥–∞–Ω–Ω—ã–µ
- –Ø–∑—ã–∫ –æ—Ç—á—ë—Ç–∞

–ü—Ä–µ–¥–ª–∞–≥–∞–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –∏ –±—É–¥—å –≥–æ—Ç–æ–≤ —Å–æ–∑–¥–∞—Ç—å DSL —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–ª—è PDF –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞.`;

        const response = await callClaudeAPI(
            messages,
            systemPrompt || defaultSystemPrompt
        );

        res.json({ response });
    } catch (error: any) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –≤ /chat:', error);
        res.status(500).json({
            error: error.message || '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
        });
    }
});

// –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ DSL
router.post('/generate-dsl', async (req, res) => {
    try {
        const { conversationHistory, expectedLanguage }: DSLGenerationRequest = req.body;

        if (!conversationHistory || !Array.isArray(conversationHistory)) {
            return res.status(400).json({ error: '–ù–µ–æ–±—Ö–æ–¥–∏–º–∞ –∏—Å—Ç–æ—Ä–∏—è —Ä–∞–∑–≥–æ–≤–æ—Ä–∞' });
        }

        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —è–∑—ã–∫ –∏–∑ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–π
        const lastUserMessage = conversationHistory
            .filter(msg => msg.role === 'user')
            .pop()?.content || '';

        const detectedLang = expectedLanguage || detectLanguage(lastUserMessage);

        // –°–æ–∑–¥–∞–µ–º —è–∑—ã–∫–æ-—Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
        const languageInstruction = detectedLang === 'arabic' ?
            '\n\nüö® –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–ø–∏—Å–∞–ª –Ω–∞ –∞—Ä–∞–±—Å–∫–æ–º –∏–ª–∏ –≤—ã–±—Ä–∞–ª –∞—Ä–∞–±—Å–∫–∏–π –æ—Ç—á–µ—Ç. –í–°–ï —Ç–µ–∫—Å—Ç—ã –≤ DSL (–∑–∞–≥–æ–ª–æ–≤–∫–∏, –æ–ø–∏—Å–∞–Ω–∏—è, –∫–æ–Ω—Ç–µ–Ω—Ç, –ø–æ–¥–ø–∏—Å–∏ –≥—Ä–∞—Ñ–∏–∫–æ–≤, –∑–∞–∫–ª—é—á–µ–Ω–∏–µ) –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –¢–û–õ–¨–ö–û –Ω–∞ –∞—Ä–∞–±—Å–∫–æ–º —è–∑—ã–∫–µ! –ù–ï –∏—Å–ø–æ–ª—å–∑—É–π —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫ –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤!' :
            detectedLang === 'english' ?
                '\n\nüö® CRITICAL: User wrote in English or selected English report. ALL texts in DSL (titles, descriptions, content, chart labels, conclusion) must be ONLY in English! DO NOT use Russian for titles!' :
                '\n\nüö® –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–ø–∏—Å–∞–ª –Ω–∞ —Ä—É—Å—Å–∫–æ–º. –í–°–ï —Ç–µ–∫—Å—Ç—ã –≤ DSL –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –¢–û–õ–¨–ö–û –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ!';

        const systemPrompt = `–¢—ã - —ç–∫—Å–ø–µ—Ä—Ç –ø–æ —Å–æ–∑–¥–∞–Ω–∏—é DSL (Domain Specific Language) —Å—Ç—Ä—É–∫—Ç—É—Ä –¥–ª—è PDF –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞.

–ù–∞ –æ—Å–Ω–æ–≤–µ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º —Å–æ–∑–¥–∞–π JSON —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ PDF –æ—Ç—á—ë—Ç–∞.

${languageInstruction}

–ü–†–ê–í–ò–õ–ê –ì–ï–ù–ï–†–ê–¶–ò–ò –ó–ê–ì–û–õ–û–í–ö–û–í:
1. –ù–ï –∏—Å–ø–æ–ª—å–∑—É–π "–ò–ò –û—Ç—á—ë—Ç" –∫–∞–∫ –∑–∞–≥–æ–ª–æ–≤–æ–∫!
2. –ò—Å–ø–æ–ª—å–∑—É–π –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ –Ω–∞ –Ω—É–∂–Ω–æ–º —è–∑—ã–∫–µ:
   - –î–ª—è –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞:
     * –ê—Ä–∞–±—Å–∫–∏–π: "ÿ™ŸÇÿ±Ÿäÿ± ÿßŸÑÿ™ÿ≥ŸàŸäŸÇ"
     * –ê–Ω–≥–ª–∏–π—Å–∫–∏–π: "Marketing Report"
     * –†—É—Å—Å–∫–∏–π: "–ú–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤—ã–π –æ—Ç—á—ë—Ç"
   - –î–ª—è –æ—Ç—á–µ—Ç–∞ –ø–æ –ø—Ä–æ–¥–∞–∂–∞–º:
     * –ê—Ä–∞–±—Å–∫–∏–π: "ÿ™ŸÇÿ±Ÿäÿ± ÿßŸÑŸÖÿ®Ÿäÿπÿßÿ™"
     * –ê–Ω–≥–ª–∏–π—Å–∫–∏–π: "Sales Report"
     * –†—É—Å—Å–∫–∏–π: "–û—Ç—á—ë—Ç –ø–æ –ø—Ä–æ–¥–∞–∂–∞–º"
   - –î–ª—è —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞:
     * –ê—Ä–∞–±—Å–∫–∏–π: "ÿßŸÑÿ™ŸÇÿ±Ÿäÿ± ÿßŸÑŸÖÿßŸÑŸä"
     * –ê–Ω–≥–ª–∏–π—Å–∫–∏–π: "Financial Report"
     * –†—É—Å—Å–∫–∏–π: "–§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –æ—Ç—á—ë—Ç"
   - –î–ª—è –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ—Ç—á–µ—Ç–∞:
     * –ê—Ä–∞–±—Å–∫–∏–π: "ÿ™ŸÇÿ±Ÿäÿ± ÿßŸÑÿ™ÿ≠ŸÑŸäŸÑÿßÿ™"
     * –ê–Ω–≥–ª–∏–π—Å–∫–∏–π: "Analytics Report"
     * –†—É—Å—Å–∫–∏–π: "–ê–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–π –æ—Ç—á—ë—Ç"
   - –î–ª—è –æ–±—â–µ–≥–æ –æ—Ç—á–µ—Ç–∞:
     * –ê—Ä–∞–±—Å–∫–∏–π: "ÿßŸÑÿ™ŸÇÿ±Ÿäÿ± ÿßŸÑÿπÿßŸÖ"
     * –ê–Ω–≥–ª–∏–π—Å–∫–∏–π: "General Report"
     * –†—É—Å—Å–∫–∏–π: "–û–±—â–∏–π –æ—Ç—á—ë—Ç"

–í–ê–ñ–ù–û: –ò—Å–ø–æ–ª—å–∑—É–π —Å–ª–µ–¥—É—é—â–∏–µ –ø—Ä–∞–≤–∏–ª–∞ –¥–ª—è —à—Ä–∏—Ñ—Ç–æ–≤ –∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞:
- –î–ª—è –∞—Ä–∞–±—Å–∫–æ–≥–æ —Ç–µ–∫—Å—Ç–∞: font: "DejaVuSans", direction: "rtl", align: "right"
- –î–ª—è –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ/—Ä—É—Å—Å–∫–æ–≥–æ: font: "DejaVuSans", direction: "ltr"
- –î–ª—è –≥—Ä–∞—Ñ–∏–∫–æ–≤ —Å –∞—Ä–∞–±—Å–∫–∏–º: rtl: true, textDirection: "rtl", font: {family: "DejaVuSans"}

–°—Ç—Ä—É–∫—Ç—É—Ä–∞ DSL –¥–æ–ª–∂–Ω–∞ –≤–∫–ª—é—á–∞—Ç—å:
- template: —Ç–∏–ø —à–∞–±–ª–æ–Ω–∞
- defaultDirection: –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ text (ltr/rtl) 
- defaultFont: "DejaVuSans"
- pages: –º–∞—Å—Å–∏–≤ —Å—Ç—Ä–∞–Ω–∏—Ü —Å —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏

–ü–†–û–í–ï–†–ö–ê –ü–ï–†–ï–î –û–¢–ü–†–ê–í–ö–û–ô:
‚úÖ –ó–∞–≥–æ–ª–æ–≤–æ–∫ –æ—Ç—á–µ—Ç–∞ –ù–ï "–ò–ò –û—Ç—á—ë—Ç", –∞ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥
‚úÖ –í—Å–µ —Ç–µ–∫—Å—Ç—ã –Ω–∞ –æ–¥–Ω–æ–º —è–∑—ã–∫–µ (–∑–∞–¥–∞–Ω–Ω–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º)
‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —à—Ä–∏—Ñ—Ç–∞ –∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è

–û—Ç–≤–µ—Ç—å –¢–û–õ–¨–ö–û –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON:
{
    "dsl": { DSL —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ },
    "explanation": "–û–±—ä—è—Å–Ω–µ–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –æ—Ç—á—ë—Ç–∞ –Ω–∞ —è–∑—ã–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
    "suggestions": ["–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ 1", "–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ 2", "–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ 3"]
}`;

        const conversationText = conversationHistory
            .map(msg => `${msg.role}: ${msg.content}`)
            .join('\n\n');

        const prompt = `–ê–Ω–∞–ª–∏–∑–∏—Ä—É–π —ç—Ç–æ—Ç —Ä–∞–∑–≥–æ–≤–æ—Ä –∏ —Å–æ–∑–¥–∞–π DSL —Å—Ç—Ä—É–∫—Ç—É—Ä—É:

${conversationText}

${languageInstruction}

–°–æ–∑–¥–∞–π –ø–æ–¥—Ä–æ–±–Ω—É—é DSL —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–ª—è PDF –æ—Ç—á—ë—Ç–∞. –ù–ï –∏—Å–ø–æ–ª—å–∑—É–π "–ò–ò –û—Ç—á—ë—Ç" –∫–∞–∫ –∑–∞–≥–æ–ª–æ–≤–æ–∫!`;

        const response = await callClaudeAPI([
            { role: 'user', content: prompt }
        ], systemPrompt);

        // –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å JSON –∏–∑ –æ—Ç–≤–µ—Ç–∞
        try {
            const jsonMatch = response.match(/\{[\s\S]*\}/);
            if (jsonMatch) {
                const result = JSON.parse(jsonMatch[0]);
                res.json(result);
            } else {
                // –°–æ–∑–¥–∞—ë–º fallback DSL
                res.json(createFallbackDSL(conversationHistory));
            }
        } catch (parseError) {
            console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback');
            res.json(createFallbackDSL(conversationHistory));
        }

    } catch (error: any) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –≤ /generate-dsl:', error);
        res.status(500).json({
            error: error.message || '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
        });
    }
});

// –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∏–¥–±–µ–∫–∞
router.post('/feedback', async (req, res) => {
    try {
        const { currentDSL, userFeedback }: FeedbackRequest = req.body;

        if (!currentDSL || !userFeedback) {
            return res.status(400).json({ error: '–ù–µ–æ–±—Ö–æ–¥–∏–º—ã currentDSL –∏ userFeedback' });
        }

        const systemPrompt = `–¢—ã - —ç–∫—Å–ø–µ—Ä—Ç –ø–æ —É–ª—É—á—à–µ–Ω–∏—é PDF –æ—Ç—á—ë—Ç–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ñ–∏–¥–±–µ–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.

–ü–æ–ª—É—á–∏ —Ç–µ–∫—É—â—É—é DSL —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∏ —Ñ–∏–¥–±–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∑–∞—Ç–µ–º –ø—Ä–µ–¥–ª–æ–∂–∏ —É–ª—É—á—à–µ–Ω–∏—è.

–í–ê–ñ–ù–û: –°–æ–±–ª—é–¥–∞–π –ø—Ä–∞–≤–∏–ª–∞ –¥–ª—è —à—Ä–∏—Ñ—Ç–æ–≤:
- –î–ª—è –∞—Ä–∞–±—Å–∫–æ–≥–æ —Ç–µ–∫—Å—Ç–∞: font: "DejaVuSans", direction: "rtl", align: "right"
- –î–ª—è –≥—Ä–∞—Ñ–∏–∫–æ–≤ —Å –∞—Ä–∞–±—Å–∫–∏–º: rtl: true, textDirection: "rtl", font: {family: "DejaVuSans"}

–ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –°–æ—Ö—Ä–∞–Ω—è–π —è–∑—ã–∫ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞! –ù–µ –º–µ–Ω—è–π —è–∑—ã–∫ –∫–æ–Ω—Ç–µ–Ω—Ç–∞.

–û—Ç–≤–µ—Ç—å –¢–û–õ–¨–ö–û –≤ JSON —Ñ–æ—Ä–º–∞—Ç–µ:
{
    "dsl": { –æ–±–Ω–æ–≤–ª—ë–Ω–Ω–∞—è DSL —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ },
    "explanation": "–û–±—ä—è—Å–Ω–µ–Ω–∏–µ –≤–Ω–µ—Å—ë–Ω–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π –Ω–∞ —è–∑—ã–∫–µ –æ—Ç—á–µ—Ç–∞",
    "suggestions": ["–¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ 1", "–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ 2"]
}`;

        const prompt = `–¢–µ–∫—É—â–∞—è DSL —Å—Ç—Ä—É–∫—Ç—É—Ä–∞:
${JSON.stringify(currentDSL, null, 2)}

–§–∏–¥–±–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:
${userFeedback}

–£–ª—É—á—à–∏ DSL —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Å–æ–≥–ª–∞—Å–Ω–æ —Ñ–∏–¥–±–µ–∫—É, —Å–æ—Ö—Ä–∞–Ω—è—è –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —è–∑—ã–∫ –æ—Ç—á–µ—Ç–∞.`;

        const response = await callClaudeAPI([
            { role: 'user', content: prompt }
        ], systemPrompt);

        try {
            const jsonMatch = response.match(/\{[\s\S]*\}/);
            if (jsonMatch) {
                const result = JSON.parse(jsonMatch[0]);
                res.json(result);
            } else {
                res.json({
                    dsl: currentDSL,
                    explanation: '–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ñ–∏–¥–±–µ–∫, —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Å—Ç–∞–ª–∞—Å—å –ø—Ä–µ–∂–Ω–µ–π',
                    suggestions: ['–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –∑–∞–ø—Ä–æ—Å']
                });
            }
        } catch (parseError) {
            res.json({
                dsl: currentDSL,
                explanation: '–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ñ–∏–¥–±–µ–∫, —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Å—Ç–∞–ª–∞—Å—å –ø—Ä–µ–∂–Ω–µ–π',
                suggestions: ['–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –∑–∞–ø—Ä–æ—Å']
            });
        }

    } catch (error: any) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –≤ /feedback:', error);
        res.status(500).json({
            error: error.message || '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
        });
    }
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ª–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞ –æ—Ç—á—ë—Ç–∞
function getLocalizedReportType(reportType: string, language: string): string {
    const translations: Record<string, Record<string, string>> = {
        arabic: {
            marketing: 'ÿ™ŸÇÿ±Ÿäÿ± ÿ™ÿ≥ŸàŸäŸÇŸä',
            sales: 'ÿ™ŸÇÿ±Ÿäÿ± ÿßŸÑŸÖÿ®Ÿäÿπÿßÿ™',
            financial: 'ÿ™ŸÇÿ±Ÿäÿ± ŸÖÿßŸÑŸä',
            analytics: 'ÿ™ŸÇÿ±Ÿäÿ± ÿ™ÿ≠ŸÑŸäŸÑŸä',
            general: 'ÿ™ŸÇÿ±Ÿäÿ± ÿπÿßŸÖ',
            'ai-generated': 'ÿ™ŸÇÿ±Ÿäÿ± ÿ∞ŸÉÿßÿ° ÿßÿµÿ∑ŸÜÿßÿπŸä'
        },
        english: {
            marketing: 'marketing report',
            sales: 'sales report',
            financial: 'financial report',
            analytics: 'analytics report',
            general: 'general report',
            'ai-generated': 'AI-generated report'
        },
        russian: {
            marketing: '–º–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤—ã–π –æ—Ç—á—ë—Ç',
            sales: '–æ—Ç—á—ë—Ç –ø–æ –ø—Ä–æ–¥–∞–∂–∞–º',
            financial: '—Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π –æ—Ç—á—ë—Ç',
            analytics: '–∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–π –æ—Ç—á—ë—Ç',
            general: '–æ–±—â–∏–π –æ—Ç—á—ë—Ç',
            'ai-generated': '–ò–ò-—Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç—á—ë—Ç'
        }
    };

    const langTranslations = translations[language] || translations.russian;
    return langTranslations[reportType] || langTranslations.general || reportType;
}

// –£–ª—É—á—à–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è fallback DSL
function createFallbackDSL(conversationHistory: ChatMessage[]) {
    const lastUserMessage = conversationHistory
        .filter(msg => msg.role === 'user')
        .pop()?.content || '–ë–∞–∑–æ–≤—ã–π –æ—Ç—á—ë—Ç';

    const language = detectLanguage(lastUserMessage);
    const reportType = detectReportType(lastUserMessage);
    const isRTL = language === 'arabic';

    console.log(`üîß –°–æ–∑–¥–∞—ë–º fallback DSL: —è–∑—ã–∫=${language}, —Ç–∏–ø=${reportType}, RTL=${isRTL}`);

    // –í–ê–ñ–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —è–∑—ã–∫–∞
    const title = extractTitle(reportType, language);

    // –ü–æ–ª—É—á–∞–µ–º –ª–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π —Ç–∏–ø –æ—Ç—á—ë—Ç–∞ –¥–ª—è –æ–±—ä—è—Å–Ω–µ–Ω–∏—è
    const localizedReportType = getLocalizedReportType(reportType, language);

    // –ü–æ–ª—É—á–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —è–∑—ã–∫–µ
    const description = language === 'arabic' ?
        'ÿ™ŸÇÿ±Ÿäÿ± ÿßÿ≠ÿ™ÿ±ÿßŸÅŸä ŸÖÿπ ÿ™ÿ≠ŸÑŸäŸÑ ŸÖŸÅÿµŸÑ Ÿàÿ±ÿ≥ŸàŸÖ ÿ®ŸäÿßŸÜŸäÿ© Ÿàÿ±ÿ§Ÿâ ŸÑÿßÿ™ÿÆÿßÿ∞ ÿßŸÑŸÇÿ±ÿßÿ±ÿßÿ™ ÿßŸÑÿ™ÿ¨ÿßÿ±Ÿäÿ©' :
        language === 'english' ?
            'Professional report with detailed analysis, charts, and insights for business decision-making' :
            '–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á—ë—Ç —Å –ø–æ–¥—Ä–æ–±–Ω–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–æ–π, –≥—Ä–∞—Ñ–∏–∫–∞–º–∏ –∏ –∏–Ω—Å–∞–π—Ç–∞–º–∏';

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é generateMainContent –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
    const mainContent = generateMainContent(reportType, language);

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ —Å –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
    const createTextElement = (text: string, position: {x: number, y: number}, extraStyle: any = {}) => {
        const hasArabic = /[\u0600-\u06FF\u0750-\u077F\u08A0-\u08FF]/.test(text);
        const elementIsRTL = hasArabic || isRTL;

        return {
            type: 'text',
            content: text,
            position: position,
            style: {
                font: 'DejaVuSans',
                direction: elementIsRTL ? 'rtl' : 'ltr',
                align: elementIsRTL ? 'right' : 'left',
                ...extraStyle,
                ...(hasArabic ? { align: extraStyle.align === 'center' ? 'center' : 'right' } : {})
            }
        };
    };

    // –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ–∏–∫ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –¥–ª—è RTL
    const createChartElement = (position: {x: number, y: number}) => {
        const chart = generateSampleChart(reportType, language);

        // –î–æ–±–∞–≤–ª—è–µ–º RTL –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –∞—Ä–∞–±—Å–∫–∏—Ö –≥—Ä–∞—Ñ–∏–∫–æ–≤
        if (isRTL) {
            chart.options = {
                ...chart.options,
                rtl: true,
                font: { family: 'DejaVuSans' }
            };
            chart.textDirection = 'rtl';
        }

        return {
            type: 'chart',
            content: chart,
            position: position,
            style: {
                width: 495,
                height: 250,
                backgroundColor: '#FFFFFF',
                borderColor: '#BDC3C7'
            }
        };
    };

    const dsl = {
        template: 'default',
        defaultFont: 'DejaVuSans',
        defaultDirection: isRTL ? 'rtl' : 'ltr',
        pages: [{
            elements: [
                // –ó–∞–≥–æ–ª–æ–≤–æ–∫ –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —è–∑—ã–∫–µ
                createTextElement(title, { x: 50, y: 100 }, {
                    fontSize: 24,
                    color: '#2C3E50',
                    width: 495,
                    align: 'center'
                }),

                // –û–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —è–∑—ã–∫–µ
                createTextElement(description, { x: 50, y: 170 }, {
                    fontSize: 12,
                    color: '#34495E',
                    width: 495,
                    lineBreak: true
                }),

                // –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —è–∑—ã–∫–µ
                createTextElement(mainContent, { x: 50, y: 220 }, {
                    fontSize: 11,
                    color: '#2C3E50',
                    width: 495,
                    lineBreak: true
                }),

                // –ì—Ä–∞—Ñ–∏–∫ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –ø–æ–¥–ø–∏—Å—è–º–∏
                createChartElement({ x: 50, y: 430 }),

                // –ó–∞–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —è–∑—ã–∫–µ
                createTextElement(getConclusion(language), { x: 50, y: 700 }, {
                    fontSize: 11,
                    color: '#7F8C8D',
                    width: 495,
                    lineBreak: true
                })
            ],
            style: {
                size: 'a4',
                margin: { top: 70, bottom: 70, left: 50, right: 50 }
            }
        }]
    };

    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ DSL
    const validatedDSL = ensureDSLFontsAndDirection(dsl);

    return {
        dsl: validatedDSL,
        explanation: language === 'arabic' ?
            `ÿ™ŸÖ ÿ•ŸÜÿ¥ÿßÿ° ${localizedReportType} ÿ®ÿßŸÑŸÑÿ∫ÿ© ÿßŸÑÿπÿ±ÿ®Ÿäÿ©` :
            language === 'english' ?
                `Created ${localizedReportType} in English` :
                `–°–æ–∑–¥–∞–Ω ${localizedReportType} –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ`,
        suggestions: language === 'arabic' ? [
            'ÿ•ÿ∂ÿßŸÅÿ© ÿßŸÑŸÖÿ≤ŸäÿØ ŸÖŸÜ ÿßŸÑÿ±ÿ≥ŸàŸÖ ÿßŸÑÿ®ŸäÿßŸÜŸäÿ© ŸàÿßŸÑŸÖÿÆÿ∑ÿ∑ÿßÿ™',
            'ÿ™ÿ∂ŸÖŸäŸÜ ÿ£ŸÇÿ≥ÿßŸÖ ÿ•ÿ∂ÿßŸÅŸäÿ©',
            'ÿ™ÿ∫ŸäŸäÿ± ŸÜŸÖÿ∑ ÿßŸÑÿ™ÿµŸÖŸäŸÖ',
            'ÿ•ÿ∂ÿßŸÅÿ© ÿ¨ÿØÿßŸàŸÑ ÿßŸÑÿ®ŸäÿßŸÜÿßÿ™'
        ] : language === 'english' ? [
            'Add more charts and diagrams',
            'Include additional sections',
            'Change design style',
            'Add data tables'
        ] : [
            '–î–æ–±–∞–≤–∏—Ç—å –±–æ–ª—å—à–µ –≥—Ä–∞—Ñ–∏–∫–æ–≤ –∏ –¥–∏–∞–≥—Ä–∞–º–º',
            '–í–∫–ª—é—á–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ä–∞–∑–¥–µ–ª—ã',
            '–ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∏–ª—å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è',
            '–î–æ–±–∞–≤–∏—Ç—å —Ç–∞–±–ª–∏—Ü—ã —Å –¥–∞–Ω–Ω—ã–º–∏'
        ]
    };
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ DSL
function ensureDSLFontsAndDirection(dsl: any): any {
    console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º DSL –Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —à—Ä–∏—Ñ—Ç–æ–≤ –∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è...');

    if (!dsl.pages || !Array.isArray(dsl.pages)) {
        return dsl;
    }

    for (const page of dsl.pages) {
        if (!page.elements || !Array.isArray(page.elements)) {
            continue;
        }

        for (const element of page.elements) {
            if (element.type === 'text' && element.content) {
                const content = String(element.content);
                const hasArabic = /[\u0600-\u06FF\u0750-\u077F\u08A0-\u08FF]/.test(content);

                // –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º –Ω–∞–ª–∏—á–∏–µ style
                if (!element.style) {
                    element.style = {};
                }

                // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
                if (hasArabic) {
                    element.style.font = 'DejaVuSans';
                    element.style.direction = 'rtl';

                    // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ –¥–ª—è –∞—Ä–∞–±—Å–∫–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
                    if (!element.style.align || element.style.align === 'left') {
                        element.style.align = element.style.align === 'center' ? 'center' : 'right';
                    }

                    console.log(`üîß –ü—Ä–æ–≤–µ—Ä–µ–Ω –∞—Ä–∞–±—Å–∫–∏–π —ç–ª–µ–º–µ–Ω—Ç: "${content.substring(0, 30)}..." -> font=DejaVuSans, direction=rtl, align=${element.style.align}`);
                } else {
                    // –î–ª—è –Ω–µ-–∞—Ä–∞–±—Å–∫–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
                    if (!element.style.font) {
                        element.style.font = 'DejaVuSans';
                    }
                    if (!element.style.direction) {
                        element.style.direction = 'ltr';
                    }

                    console.log(`‚úÖ –ü—Ä–æ–≤–µ—Ä–µ–Ω —ç–ª–µ–º–µ–Ω—Ç: "${content.substring(0, 30)}..." -> font=${element.style.font}, direction=${element.style.direction}`);
                }
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥—Ä–∞—Ñ–∏–∫–∏
            if (element.type === 'chart' && element.content) {
                const chart = element.content;

                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –≥—Ä–∞—Ñ–∏–∫–∞
                if (chart.title) {
                    const hasArabic = /[\u0600-\u06FF\u0750-\u077F\u08A0-\u08FF]/.test(chart.title);

                    if (!chart.options) {
                        chart.options = {};
                    }

                    if (hasArabic) {
                        chart.options.rtl = true;
                        chart.options.font = { family: 'DejaVuSans' };
                        chart.textDirection = 'rtl';
                        console.log(`üîß –ü—Ä–æ–≤–µ—Ä–µ–Ω –∑–∞–≥–æ–ª–æ–≤–æ–∫ –≥—Ä–∞—Ñ–∏–∫–∞: "${chart.title}" -> rtl=true, font=DejaVuSans, textDirection=rtl`);
                    }
                }

                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∏ –¥–∞–Ω–Ω—ã—Ö
                if (chart.data && chart.data.labels) {
                    const hasArabicLabels = chart.data.labels.some((label: string) =>
                        /[\u0600-\u06FF\u0750-\u077F\u08A0-\u08FF]/.test(label)
                    );

                    if (hasArabicLabels) {
                        if (!chart.options) {
                            chart.options = {};
                        }
                        chart.options.rtl = true;
                        chart.options.font = { family: 'DejaVuSans' };
                        chart.textDirection = 'rtl';
                        console.log(`üîß –ü—Ä–æ–≤–µ—Ä–µ–Ω—ã –ø–æ–¥–ø–∏—Å–∏ –≥—Ä–∞—Ñ–∏–∫–∞ —Å –∞—Ä–∞–±—Å–∫–∏–º —Ç–µ–∫—Å—Ç–æ–º -> rtl=true, font=DejaVuSans, textDirection=rtl`);
                    }
                }
            }
        }
    }

    console.log('‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ DSL –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
    return dsl;
}

// –§—É–Ω–∫—Ü–∏—è generateMainContent
function generateMainContent(reportType: string, language: 'russian' | 'english' | 'arabic'): string {
    const contentMap: Record<string, Record<string, string>> = {
        arabic: {
            marketing: `ÿ™ŸÇÿ±Ÿäÿ± ÿ™ÿ≠ŸÑŸäŸÑ ÿßŸÑÿ™ÿ≥ŸàŸäŸÇ

1. ŸÜÿ∏ÿ±ÿ© ÿπÿßŸÖÿ© ÿπŸÑŸâ ÿßŸÑÿ£ŸÜÿ¥ÿ∑ÿ© ÿßŸÑÿ™ÿ≥ŸàŸäŸÇŸäÿ©
   ‚Ä¢ ÿ™ÿ≠ŸÑŸäŸÑ ÿßŸÑÿ≠ŸÖŸÑÿßÿ™ ÿßŸÑÿ™ÿ≥ŸàŸäŸÇŸäÿ© ÿßŸÑÿ≠ÿßŸÑŸäÿ©
   ‚Ä¢ ÿ™ŸÇŸäŸäŸÖ ŸÅÿπÿßŸÑŸäÿ© ŸÇŸÜŸàÿßÿ™ ÿßŸÑÿ•ÿπŸÑÿßŸÜ
   ‚Ä¢ ÿ®ÿ≠ÿ´ ÿßŸÑÿ¨ŸÖŸáŸàÿ± ÿßŸÑŸÖÿ≥ÿ™ŸáÿØŸÅ

2. ŸÖÿ§ÿ¥ÿ±ÿßÿ™ ÿßŸÑÿ£ÿØÿßÿ° ÿßŸÑÿ±ÿ¶Ÿäÿ≥Ÿäÿ©
   ‚Ä¢ ÿπÿßÿ¶ÿØ ÿßŸÑÿßÿ≥ÿ™ÿ´ŸÖÿßÿ± ŸÑŸÑÿ£ŸÜÿ¥ÿ∑ÿ© ÿßŸÑÿ™ÿ≥ŸàŸäŸÇŸäÿ©
   ‚Ä¢ ÿßŸÑÿ™ÿ≠ŸàŸäŸÑ ÿπÿ®ÿ± ŸÇŸÜŸàÿßÿ™ ÿßŸÑÿßÿ≥ÿ™ÿ≠Ÿàÿßÿ∞
   ‚Ä¢ ÿ™ŸÉŸÑŸÅÿ© ÿßŸÉÿ™ÿ≥ÿßÿ® ÿßŸÑÿπŸÖŸÑÿßÿ°

3. ÿßŸÑÿ™ŸàÿµŸäÿßÿ™
   ‚Ä¢ ÿ™ÿ≠ÿ≥ŸäŸÜ ŸÖŸäÿ≤ÿßŸÜŸäÿ© ÿßŸÑÿ™ÿ≥ŸàŸäŸÇ
   ‚Ä¢ ÿßŸÑÿ™ÿ±ŸÉŸäÿ≤ ÿπŸÑŸâ ÿßŸÑŸÇŸÜŸàÿßÿ™ ÿßŸÑÿ£ŸÉÿ´ÿ± ŸÅÿπÿßŸÑŸäÿ©
   ‚Ä¢ ÿ™ÿ≠ÿ≥ŸäŸÜ ÿ¨ŸàÿØÿ© ÿßŸÑŸÖÿ≠ÿ™ŸàŸâ`,

            sales: `ÿ™ŸÇÿ±Ÿäÿ± ÿßŸÑŸÖÿ®Ÿäÿπÿßÿ™

1. ÿ™ÿ≠ŸÑŸäŸÑ ÿßŸÑŸÖÿ®Ÿäÿπÿßÿ™
   ‚Ä¢ ÿ•ÿ¨ŸÖÿßŸÑŸä ÿ≠ÿ¨ŸÖ ÿßŸÑŸÖÿ®Ÿäÿπÿßÿ™ ŸÑŸÑŸÅÿ™ÿ±ÿ©
   ‚Ä¢ ŸÖŸÇÿßÿ±ŸÜÿ© ŸÖÿπ ÿßŸÑŸÅÿ™ÿ±ÿßÿ™ ÿßŸÑÿ≥ÿßÿ®ŸÇÿ©
   ‚Ä¢ ÿ™ÿ≠ŸÑŸäŸÑ ÿßŸÑŸÖŸàÿ≥ŸÖŸäÿ©

2. ŸÅÿπÿßŸÑŸäÿ© ÿßŸÑŸÅÿ±ŸäŸÇ
   ‚Ä¢ ÿ£ÿØÿßÿ° ÿßŸÑŸÖÿØŸäÿ±ŸäŸÜ
   ‚Ä¢ ÿ™ÿ≠ŸàŸäŸÑ ÿßŸÑÿπŸÖŸÑÿßÿ° ÿßŸÑŸÖÿ≠ÿ™ŸÖŸÑŸäŸÜ ÿ•ŸÑŸâ ŸÖÿ®Ÿäÿπÿßÿ™
   ‚Ä¢ ŸÖÿ™Ÿàÿ≥ÿ∑ ŸÇŸäŸÖÿ© ÿßŸÑŸÖÿπÿßŸÖŸÑÿ©

3. ÿßŸÑÿÆÿ∑ÿ∑ ŸàÿßŸÑÿ™ŸàŸÇÿπÿßÿ™
   ‚Ä¢ ÿ£ŸáÿØÿßŸÅ ÿßŸÑŸÅÿ™ÿ±ÿ© ÿßŸÑŸÇÿßÿØŸÖÿ©
   ‚Ä¢ ÿßÿ≥ÿ™ÿ±ÿßÿ™Ÿäÿ¨Ÿäÿßÿ™ ÿ≤ŸäÿßÿØÿ© ÿßŸÑŸÖÿ®Ÿäÿπÿßÿ™
   ‚Ä¢ ÿßŸÑŸÖŸàÿßÿ±ÿØ ÿßŸÑŸÖÿ∑ŸÑŸàÿ®ÿ©`,

            financial: `ÿßŸÑÿ™ŸÇÿ±Ÿäÿ± ÿßŸÑŸÖÿßŸÑŸä

1. ÿßŸÑŸÖÿ§ÿ¥ÿ±ÿßÿ™ ÿßŸÑŸÖÿßŸÑŸäÿ©
   ‚Ä¢ ÿßŸÑÿ•Ÿäÿ±ÿßÿØÿßÿ™ ŸàÿßŸÑÿ£ÿ±ÿ®ÿßÿ≠
   ‚Ä¢ ÿßŸÑŸÜŸÅŸÇÿßÿ™ ÿ≠ÿ≥ÿ® ÿßŸÑŸÅÿ¶ÿßÿ™
   ‚Ä¢ ÿßŸÑÿ™ÿØŸÅŸÇÿßÿ™ ÿßŸÑŸÜŸÇÿØŸäÿ©

2. ÿ™ÿ≠ŸÑŸäŸÑ ÿßŸÑÿ±ÿ®ÿ≠Ÿäÿ©
   ‚Ä¢ ŸáŸàÿßŸÖÿ¥ ÿßŸÑŸÖŸÜÿ™ÿ¨ÿßÿ™
   ‚Ä¢ ÿßŸÑŸÉŸÅÿßÿ°ÿ© ÿßŸÑÿ™ÿ¥ÿ∫ŸäŸÑŸäÿ©
   ‚Ä¢ ŸÜŸÇÿ∑ÿ© ÿßŸÑÿ™ÿπÿßÿØŸÑ

3. ÿßŸÑÿ™ÿÆÿ∑Ÿäÿ∑ ÿßŸÑŸÖÿßŸÑŸä
   ‚Ä¢ ÿßŸÑŸÖŸäÿ≤ÿßŸÜŸäÿ© ŸÑŸÑŸÅÿ™ÿ±ÿ© ÿßŸÑŸÇÿßÿØŸÖÿ©
   ‚Ä¢ ÿÆÿ∑ÿ∑ ÿßŸÑÿßÿ≥ÿ™ÿ´ŸÖÿßÿ±
   ‚Ä¢ ÿ•ÿØÿßÿ±ÿ© ÿßŸÑŸÖÿÆÿßÿ∑ÿ±`,

            analytics: `ÿ™ŸÇÿ±Ÿäÿ± ÿßŸÑÿ™ÿ≠ŸÑŸäŸÑÿßÿ™

1. ÿ¨ŸÖÿπ ÿßŸÑÿ®ŸäÿßŸÜÿßÿ™ ŸàÿßŸÑÿ™ÿ≠ŸÑŸäŸÑ
   ‚Ä¢ ŸÖÿµÿßÿØÿ± ÿßŸÑÿ®ŸäÿßŸÜÿßÿ™
   ‚Ä¢ ŸÖŸÜŸáÿ¨Ÿäÿ© ÿßŸÑÿ™ÿ≠ŸÑŸäŸÑ
   ‚Ä¢ ÿßŸÑŸÖŸÇÿßŸäŸäÿ≥ ÿßŸÑÿ±ÿ¶Ÿäÿ≥Ÿäÿ©

2. ÿßŸÑÿßÿ™ÿ¨ÿßŸáÿßÿ™ ÿßŸÑŸÖÿ≠ÿØÿØÿ©
   ‚Ä¢ ÿßŸÑÿ£ŸÜŸÖÿßÿ∑ ÿßŸÑÿ±ÿ¶Ÿäÿ≥Ÿäÿ©
   ‚Ä¢ ÿßŸÑÿßÿ±ÿ™ÿ®ÿßÿ∑ÿßÿ™ ÿßŸÑÿ•ÿ≠ÿµÿßÿ¶Ÿäÿ©
   ‚Ä¢ ÿßŸÑŸÜŸÖÿßÿ∞ÿ¨ ÿßŸÑÿ™ŸÜÿ®ÿ§Ÿäÿ©

3. ÿßŸÑÿßÿ≥ÿ™ŸÜÿ™ÿßÿ¨ÿßÿ™ ŸàÿßŸÑÿ™ŸàÿµŸäÿßÿ™
   ‚Ä¢ ÿßŸÑÿ™ŸàÿµŸäÿßÿ™ ÿßŸÑÿπŸÖŸÑŸäÿ©
   ‚Ä¢ ÿÆÿ∑ÿ© ÿßŸÑÿπŸÖŸÑ
   ‚Ä¢ ÿßŸÑŸÜÿ™ÿßÿ¶ÿ¨ ÿßŸÑŸÖÿ™ŸàŸÇÿπÿ©`,

            general: `ÿßŸÑÿ™ŸÇÿ±Ÿäÿ± ÿßŸÑÿπÿßŸÖ

1. ÿßŸÑŸÖŸÇÿØŸÖÿ©
   ‚Ä¢ ÿ∫ÿ±ÿ∂ ÿßŸÑÿ™ŸÇÿ±Ÿäÿ±
   ‚Ä¢ ÿßŸÑŸÖŸÜŸáÿ¨Ÿäÿ©
   ‚Ä¢ ÿßŸÑÿ£ÿ≥ÿ¶ŸÑÿ© ÿßŸÑÿ±ÿ¶Ÿäÿ≥Ÿäÿ©

2. ÿßŸÑÿ¨ÿ≤ÿ° ÿßŸÑÿ±ÿ¶Ÿäÿ≥Ÿä
   ‚Ä¢ ÿ™ÿ≠ŸÑŸäŸÑ ÿßŸÑŸàÿ∂ÿπ ÿßŸÑÿ≠ÿßŸÑŸä
   ‚Ä¢ ÿßŸÑŸÖÿ¥ÿßŸÉŸÑ ÿßŸÑŸÖÿ≠ÿØÿØÿ©
   ‚Ä¢ ŸÅÿ±ÿµ ÿßŸÑÿ™ÿ≠ÿ≥ŸäŸÜ

3. ÿßŸÑÿÆŸÑÿßÿµÿ©
   ‚Ä¢ ÿßŸÑŸÜÿ™ÿßÿ¶ÿ¨ ÿßŸÑÿ±ÿ¶Ÿäÿ≥Ÿäÿ©
   ‚Ä¢ ÿßŸÑÿ™ŸàÿµŸäÿßÿ™
   ‚Ä¢ ÿßŸÑÿÆÿ∑Ÿàÿßÿ™ ÿßŸÑÿ™ÿßŸÑŸäÿ©`
        },
        english: {
            marketing: `MARKETING ANALYTICS REPORT

1. MARKETING ACTIVITIES OVERVIEW
   ‚Ä¢ Current marketing campaigns analysis
   ‚Ä¢ Advertising channels effectiveness evaluation
   ‚Ä¢ Target audience research

2. KEY PERFORMANCE INDICATORS
   ‚Ä¢ Marketing activities ROI
   ‚Ä¢ Conversion by acquisition channels
   ‚Ä¢ Customer acquisition cost

3. RECOMMENDATIONS
   ‚Ä¢ Marketing budget optimization
   ‚Ä¢ Focus on most effective channels
   ‚Ä¢ Content quality improvement`,

            sales: `SALES REPORT

1. SALES ANALYSIS
   ‚Ä¢ Total sales volume for the period
   ‚Ä¢ Comparison with previous periods
   ‚Ä¢ Seasonality analysis

2. TEAM EFFECTIVENESS
   ‚Ä¢ Managers performance
   ‚Ä¢ Lead to sales conversion
   ‚Ä¢ Average transaction value

3. PLANS AND FORECASTS
   ‚Ä¢ Goals for the next period
   ‚Ä¢ Sales growth strategies
   ‚Ä¢ Required resources`,

            financial: `FINANCIAL REPORT

1. FINANCIAL INDICATORS
   ‚Ä¢ Revenue and profit
   ‚Ä¢ Expenses by categories
   ‚Ä¢ Cash flows

2. PROFITABILITY ANALYSIS
   ‚Ä¢ Product margins
   ‚Ä¢ Operational efficiency
   ‚Ä¢ Break-even point

3. FINANCIAL PLANNING
   ‚Ä¢ Budget for the next period
   ‚Ä¢ Investment plans
   ‚Ä¢ Risk management`,

            analytics: `ANALYTICS REPORT

1. DATA COLLECTION AND ANALYSIS
   ‚Ä¢ Data sources
   ‚Ä¢ Analysis methodology
   ‚Ä¢ Key metrics

2. IDENTIFIED TRENDS
   ‚Ä¢ Main patterns
   ‚Ä¢ Statistical correlations
   ‚Ä¢ Predictive models

3. CONCLUSIONS AND RECOMMENDATIONS
   ‚Ä¢ Practical recommendations
   ‚Ä¢ Action plan
   ‚Ä¢ Expected results`,

            general: `GENERAL REPORT

1. INTRODUCTION
   ‚Ä¢ Report purpose
   ‚Ä¢ Methodology
   ‚Ä¢ Key questions

2. MAIN PART
   ‚Ä¢ Current situation analysis
   ‚Ä¢ Identified problems
   ‚Ä¢ Improvement opportunities

3. CONCLUSION
   ‚Ä¢ Main findings
   ‚Ä¢ Recommendations
   ‚Ä¢ Next steps`
        },
        russian: {
            marketing: `–ê–ù–ê–õ–ò–¢–ò–ß–ï–°–ö–ò–ô –û–¢–ß–Å–¢ –ü–û –ú–ê–†–ö–ï–¢–ò–ù–ì–£

1. –û–ë–ó–û–† –ú–ê–†–ö–ï–¢–ò–ù–ì–û–í–û–ô –î–ï–Ø–¢–ï–õ–¨–ù–û–°–¢–ò
   ‚Ä¢ –ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—É—â–∏—Ö –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤—ã—Ö –∫–∞–º–ø–∞–Ω–∏–π
   ‚Ä¢ –û—Ü–µ–Ω–∫–∞ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Ä–µ–∫–ª–∞–º–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤
   ‚Ä¢ –ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ —Ü–µ–ª–µ–≤–æ–π –∞—É–¥–∏—Ç–æ—Ä–∏–∏

2. –ö–õ–Æ–ß–ï–í–´–ï –ü–û–ö–ê–ó–ê–¢–ï–õ–ò
   ‚Ä¢ ROI –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤—ã—Ö –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π
   ‚Ä¢ –ö–æ–Ω–≤–µ—Ä—Å–∏—è –ø–æ –∫–∞–Ω–∞–ª–∞–º –ø—Ä–∏–≤–ª–µ—á–µ–Ω–∏—è
   ‚Ä¢ –°—Ç–æ–∏–º–æ—Å—Ç—å –ø—Ä–∏–≤–ª–µ—á–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞

3. –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò
   ‚Ä¢ –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —Ä–µ–∫–ª–∞–º–Ω–æ–≥–æ –±—é–¥–∂–µ—Ç–∞
   ‚Ä¢ –§–æ–∫—É—Å –Ω–∞ –Ω–∞–∏–±–æ–ª–µ–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–µ –∫–∞–Ω–∞–ª—ã
   ‚Ä¢ –£–ª—É—á—à–µ–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞`,

            sales: `–û–¢–ß–Å–¢ –ü–û –ü–†–û–î–ê–ñ–ê–ú

1. –ê–ù–ê–õ–ò–ó –ü–†–û–î–ê–ñ
   ‚Ä¢ –û–±—â–∏–π –æ–±—ä—ë–º –ø—Ä–æ–¥–∞–∂ –∑–∞ –ø–µ—Ä–∏–æ–¥
   ‚Ä¢ –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –ø—Ä–µ–¥—ã–¥—É—â–∏–º–∏ –ø–µ—Ä–∏–æ–¥–∞–º–∏
   ‚Ä¢ –ê–Ω–∞–ª–∏–∑ —Å–µ–∑–æ–Ω–Ω–æ—Å—Ç–∏

2. –≠–§–§–ï–ö–¢–ò–í–ù–û–°–¢–¨ –ö–û–ú–ê–ù–î–´
   ‚Ä¢ –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤
   ‚Ä¢ –ö–æ–Ω–≤–µ—Ä—Å–∏—è –ª–∏–¥–æ–≤ –≤ –ø—Ä–æ–¥–∞–∂–∏
   ‚Ä¢ –°—Ä–µ–¥–Ω–∏–π —á–µ–∫

3. –ü–õ–ê–ù–´ –ò –ü–†–û–ì–ù–û–ó–´
   ‚Ä¢ –¶–µ–ª–∏ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –ø–µ—Ä–∏–æ–¥
   ‚Ä¢ –°—Ç—Ä–∞—Ç–µ–≥–∏–∏ —É–≤–µ–ª–∏—á–µ–Ω–∏—è –ø—Ä–æ–¥–∞–∂
   ‚Ä¢ –ù–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ä–µ—Å—É—Ä—Å—ã`,

            financial: `–§–ò–ù–ê–ù–°–û–í–´–ô –û–¢–ß–Å–¢

1. –§–ò–ù–ê–ù–°–û–í–´–ï –ü–û–ö–ê–ó–ê–¢–ï–õ–ò
   ‚Ä¢ –í—ã—Ä—É—á–∫–∞ –∏ –ø—Ä–∏–±—ã–ª—å
   ‚Ä¢ –†–∞—Å—Ö–æ–¥—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
   ‚Ä¢ –î–µ–Ω–µ–∂–Ω—ã–µ –ø–æ—Ç–æ–∫–∏

2. –ê–ù–ê–õ–ò–ó –†–ï–ù–¢–ê–ë–ï–õ–¨–ù–û–°–¢–ò
   ‚Ä¢ –ú–∞—Ä–∂–∏–Ω–∞–ª—å–Ω–æ—Å—Ç—å –ø—Ä–æ–¥—É–∫—Ç–æ–≤
   ‚Ä¢ –û–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–∞—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
   ‚Ä¢ –¢–æ—á–∫–∞ –±–µ–∑—É–±—ã—Ç–æ—á–Ω–æ—Å—Ç–∏

3. –§–ò–ù–ê–ù–°–û–í–û–ï –ü–õ–ê–ù–ò–†–û–í–ê–ù–ò–ï
   ‚Ä¢ –ë—é–¥–∂–µ—Ç –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –ø–µ—Ä–∏–æ–¥
   ‚Ä¢ –ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã–µ –ø–ª–∞–Ω—ã
   ‚Ä¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∏—Å–∫–∞–º–∏`,

            analytics: `–ê–ù–ê–õ–ò–¢–ò–ß–ï–°–ö–ò–ô –û–¢–ß–Å–¢

1. –°–ë–û–† –ò –ê–ù–ê–õ–ò–ó –î–ê–ù–ù–´–•
   ‚Ä¢ –ò—Å—Ç–æ—á–Ω–∏–∫–∏ –¥–∞–Ω–Ω—ã—Ö
   ‚Ä¢ –ú–µ—Ç–æ–¥–æ–ª–æ–≥–∏—è –∞–Ω–∞–ª–∏–∑–∞
   ‚Ä¢ –ö–ª—é—á–µ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏

2. –í–´–Ø–í–õ–ï–ù–ù–´–ï –¢–†–ï–ù–î–´
   ‚Ä¢ –û—Å–Ω–æ–≤–Ω—ã–µ –∑–∞–∫–æ–Ω–æ–º–µ—Ä–Ω–æ—Å—Ç–∏
   ‚Ä¢ –°—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏
   ‚Ä¢ –ü—Ä–æ–≥–Ω–æ–∑–Ω—ã–µ –º–æ–¥–µ–ª–∏

3. –í–´–í–û–î–´ –ò –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò
   ‚Ä¢ –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
   ‚Ä¢ –ü–ª–∞–Ω –¥–µ–π—Å—Ç–≤–∏–π
   ‚Ä¢ –û–∂–∏–¥–∞–µ–º—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã`,

            general: `–û–ë–©–ò–ô –û–¢–ß–Å–¢

1. –í–í–ï–î–ï–ù–ò–ï
   ‚Ä¢ –¶–µ–ª—å –æ—Ç—á—ë—Ç–∞
   ‚Ä¢ –ú–µ—Ç–æ–¥–æ–ª–æ–≥–∏—è
   ‚Ä¢ –û—Å–Ω–æ–≤–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã

2. –û–°–ù–û–í–ù–ê–Ø –ß–ê–°–¢–¨
   ‚Ä¢ –ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—É—â–µ–π —Å–∏—Ç—É–∞—Ü–∏–∏
   ‚Ä¢ –í—ã—è–≤–ª–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã
   ‚Ä¢ –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è

3. –ó–ê–ö–õ–Æ–ß–ï–ù–ò–ï
   ‚Ä¢ –û—Å–Ω–æ–≤–Ω—ã–µ –≤—ã–≤–æ–¥—ã
   ‚Ä¢ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
   ‚Ä¢ –î–∞–ª—å–Ω–µ–π—à–∏–µ —à–∞–≥–∏`
        }
    };

    const cleanReportType = reportType.replace(/-en$|-ar$/, '');
    const langContent = contentMap[language] || contentMap.russian;
    return langContent[cleanReportType] || langContent.general || '';
}

// –£—Ç–∏–ª–∏—Ç–∞—Ä–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
function detectLanguage(text: string): 'russian' | 'english' | 'arabic' {
    if (/[\u0600-\u06FF]/.test(text)) return 'arabic';
    if (/[–∞-—è—ë]/i.test(text)) return 'russian';
    return 'english';
}

function detectReportType(text: string): string {
    const lower = text.toLowerCase();
    if (lower.includes('–º–∞—Ä–∫–µ—Ç–∏–Ω–≥') || lower.includes('marketing') || lower.includes('ÿ™ÿ≥ŸàŸäŸÇ')) return 'marketing';
    if (lower.includes('–ø—Ä–æ–¥–∞–∂') || lower.includes('sales') || lower.includes('ŸÖÿ®Ÿäÿπÿßÿ™')) return 'sales';
    if (lower.includes('—Ñ–∏–Ω–∞–Ω—Å') || lower.includes('financial') || lower.includes('ŸÖÿßŸÑŸä')) return 'financial';
    if (lower.includes('–∞–Ω–∞–ª–∏—Ç–∏–∫') || lower.includes('analytics') || lower.includes('ÿ™ÿ≠ŸÑŸäŸÑ')) return 'analytics';
    return 'general';
}

// –£–ª—É—á—à–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è extractTitle - –ù–ï –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç "–ò–ò –û—Ç—á—ë—Ç"
function extractTitle(reportType: string, language: string): string {
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —è–∑—ã–∫–µ
    const titles: Record<string, Record<string, string>> = {
        arabic: {
            marketing: 'ÿ™ŸÇÿ±Ÿäÿ± ÿßŸÑÿ™ÿ≥ŸàŸäŸÇ',
            sales: 'ÿ™ŸÇÿ±Ÿäÿ± ÿßŸÑŸÖÿ®Ÿäÿπÿßÿ™',
            financial: 'ÿßŸÑÿ™ŸÇÿ±Ÿäÿ± ÿßŸÑŸÖÿßŸÑŸä',
            analytics: 'ÿ™ŸÇÿ±Ÿäÿ± ÿßŸÑÿ™ÿ≠ŸÑŸäŸÑÿßÿ™',
            general: 'ÿßŸÑÿ™ŸÇÿ±Ÿäÿ± ÿßŸÑÿπÿßŸÖ'
        },
        english: {
            marketing: 'Marketing Report',
            sales: 'Sales Report',
            financial: 'Financial Report',
            analytics: 'Analytics Report',
            general: 'General Report'
        },
        russian: {
            marketing: '–ú–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤—ã–π –æ—Ç—á—ë—Ç',
            sales: '–û—Ç—á—ë—Ç –ø–æ –ø—Ä–æ–¥–∞–∂–∞–º',
            financial: '–§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –æ—Ç—á—ë—Ç',
            analytics: '–ê–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–π –æ—Ç—á—ë—Ç',
            general: '–û–±—â–∏–π –æ—Ç—á—ë—Ç'
        }
    };

    const langTitles = titles[language] || titles.russian;
    return langTitles[reportType] || langTitles.general;
}

function generateContent(reportType: string, language: string): string {
    const content: Record<string, Record<string, string>> = {
        russian: {
            marketing: '–ú–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤—ã–π –æ—Ç—á—ë—Ç —Å –∞–Ω–∞–ª–∏–∑–æ–º –∫–∞–º–ø–∞–Ω–∏–π –∏ ROI',
            sales: '–û—Ç—á—ë—Ç –ø–æ –ø—Ä–æ–¥–∞–∂–∞–º —Å –¥–∏–Ω–∞–º–∏–∫–æ–π –∏ –ø—Ä–æ–≥–Ω–æ–∑–∞–º–∏',
            financial: '–§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –æ—Ç—á—ë—Ç —Å –ø–æ–∫–∞–∑–∞—Ç–µ–ª—è–º–∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏',
            analytics: '–ê–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–π –æ—Ç—á—ë—Ç —Å —Ç—Ä–µ–Ω–¥–∞–º–∏ –∏ –∏–Ω—Å–∞–π—Ç–∞–º–∏',
            general: '–û–±—â–∏–π –æ—Ç—á—ë—Ç —Å –∫–ª—é—á–µ–≤—ã–º–∏ –ø–æ–∫–∞–∑–∞—Ç–µ–ª—è–º–∏'
        },
        english: {
            marketing: 'Marketing report with campaign analysis and ROI',
            sales: 'Sales report with dynamics and forecasts',
            financial: 'Financial report with performance metrics',
            analytics: 'Analytics report with trends and insights',
            general: 'General report with key indicators'
        },
        arabic: {
            marketing: 'ÿ™ŸÇÿ±Ÿäÿ± ÿ™ÿ≥ŸàŸäŸÇŸä ŸÖÿπ ÿ™ÿ≠ŸÑŸäŸÑ ÿßŸÑÿ≠ŸÖŸÑÿßÿ™ ŸàÿßŸÑÿπÿßÿ¶ÿØ ÿπŸÑŸâ ÿßŸÑÿßÿ≥ÿ™ÿ´ŸÖÿßÿ±',
            sales: 'ÿ™ŸÇÿ±Ÿäÿ± ÿßŸÑŸÖÿ®Ÿäÿπÿßÿ™ ŸÖÿπ ÿßŸÑÿØŸäŸÜÿßŸÖŸäŸÉŸäÿßÿ™ ŸàÿßŸÑÿ™ŸàŸÇÿπÿßÿ™',
            financial: 'ÿ™ŸÇÿ±Ÿäÿ± ŸÖÿßŸÑŸä ŸÖÿπ ŸÖŸÇÿßŸäŸäÿ≥ ÿßŸÑÿ£ÿØÿßÿ°',
            analytics: 'ÿ™ŸÇÿ±Ÿäÿ± ÿ™ÿ≠ŸÑŸäŸÑŸä ŸÖÿπ ÿßŸÑÿßÿ™ÿ¨ÿßŸáÿßÿ™ ŸàÿßŸÑÿ±ÿ§Ÿâ',
            general: 'ÿ™ŸÇÿ±Ÿäÿ± ÿπÿßŸÖ ŸÖÿπ ÿßŸÑŸÖÿ§ÿ¥ÿ±ÿßÿ™ ÿßŸÑÿ±ÿ¶Ÿäÿ≥Ÿäÿ©'
        }
    };

    const langContent = content[language] || content.russian;
    return langContent[reportType] || langContent.general;
}

function generateSampleChart(reportType: string, language: string): any {
    const isRTL = language === 'arabic';

    const chart = {
        type: 'line',
        title: language === 'arabic' ? 'ÿØŸäŸÜÿßŸÖŸäŸÉŸäÿ© ÿßŸÑŸÖÿ®Ÿäÿπÿßÿ™' :
            language === 'english' ? 'Sales Dynamics' :
                '–î–∏–Ω–∞–º–∏–∫–∞ –ø—Ä–æ–¥–∞–∂',
        data: {
            labels: language === 'arabic' ? ['ŸäŸÜÿßŸäÿ±', 'ŸÅÿ®ÿ±ÿßŸäÿ±', 'ŸÖÿßÿ±ÿ≥', 'ÿ£ÿ®ÿ±ŸäŸÑ', 'ŸÖÿßŸäŸà', 'ŸäŸàŸÜŸäŸà'] :
                language === 'english' ? ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun'] :
                    ['–Ø–Ω–≤', '–§–µ–≤', '–ú–∞—Ä', '–ê–ø—Ä', '–ú–∞–π', '–ò—é–Ω'],
            datasets: [{
                label: language === 'arabic' ? 'ÿßŸÑŸÖÿ®Ÿäÿπÿßÿ™ (ÿ£ŸÑŸÅ ÿ±Ÿàÿ®ŸÑ)' :
                    language === 'english' ? 'Sales (k RUB)' :
                        '–ü—Ä–æ–¥–∞–∂–∏ (—Ç—ã—Å. —Ä—É–±.)',
                data: [100, 120, 140, 110, 160, 180],
                backgroundColor: 'rgba(52, 152, 219, 0.2)',
                borderColor: '#3498DB',
                borderWidth: 2
            }]
        },
        options: {
            responsive: false,
            animation: false
        }
    };

    return chart;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–∫–ª—é—á–µ–Ω–∏—è –Ω–∞ –Ω—É–∂–Ω–æ–º —è–∑—ã–∫–µ
function getConclusion(language: string): string {
    const conclusions: Record<string, string> = {
        russian: '–ó–∞–∫–ª—é—á–µ–Ω–∏–µ:\n\n–î–∞–Ω–Ω—ã–π –æ—Ç—á—ë—Ç –±—ã–ª –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–∞—à–∏—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π. –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞–º.',
        english: 'Conclusion:\n\nThis report was automatically generated based on your requirements. For more detailed information, please contact our specialists.',
        arabic: 'ÿßŸÑÿÆŸÑÿßÿµÿ©:\n\nÿ™ŸÖ ÿ•ŸÜÿ¥ÿßÿ° Ÿáÿ∞ÿß ÿßŸÑÿ™ŸÇÿ±Ÿäÿ± ÿ™ŸÑŸÇÿßÿ¶ŸäŸãÿß ÿ®ŸÜÿßÿ°Ÿã ÿπŸÑŸâ ŸÖÿ™ÿ∑ŸÑÿ®ÿßÿ™ŸÉŸÖ. ŸÑŸÑÿ≠ÿµŸàŸÑ ÿπŸÑŸâ ŸÖÿπŸÑŸàŸÖÿßÿ™ ÿ£ŸÉÿ´ÿ± ÿ™ŸÅÿµŸäŸÑÿßŸãÿå Ÿäÿ±ÿ¨Ÿâ ÿßŸÑÿßÿ™ÿµÿßŸÑ ÿ®ÿßŸÑŸÖÿÆÿ™ÿµŸäŸÜ.'
    };

    return conclusions[language] || conclusions.russian;
}

export default router;