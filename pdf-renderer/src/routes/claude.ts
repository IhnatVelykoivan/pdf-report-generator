// pdf-renderer/src/routes/claude.ts

import express from 'express';
import axios from 'axios';
import { dslGenerator, type ChatMessage, type DSLGenerationResult } from '../engine/dsl/dslGenerator';
import {
    detectLanguage,
    type SupportedLanguage
} from '../utils/languageUtils';
import { autoFixDSL } from '../middleware/dslAutoFixer';

const router = express.Router();

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Claude API
const CLAUDE_API_URL = 'https://api.anthropic.com/v1/messages';
const CLAUDE_API_KEY = process.env.CLAUDE_API_KEY;

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–ª—é—á–∞
const isClaudeAvailable = !!CLAUDE_API_KEY;

if (!isClaudeAvailable) {
    console.warn('‚ö†Ô∏è CLAUDE_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è');
    console.warn('‚ö†Ô∏è –ß–∞—Ç —Å –ò–ò –±—É–¥–µ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –Ω–æ –±—ã—Å—Ç—Ä—ã–µ –æ—Ç—á–µ—Ç—ã –±—É–¥—É—Ç —Ä–∞–±–æ—Ç–∞—Ç—å!');
}

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –æ—Ç–≤–µ—Ç–∞ Claude API
interface ClaudeResponse {
    content: Array<{
        text: string;
        type: string;
    }>;
    id: string;
    model: string;
    role: string;
    stop_reason: string;
    stop_sequence: null;
    type: string;
    usage: {
        input_tokens: number;
        output_tokens: number;
    };
}

// –ë–∞–∑–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –∫ Claude API
async function callClaudeAPI(messages: ChatMessage[], systemPrompt: string, maxTokens = 4000): Promise<string> {
    if (!isClaudeAvailable) {
        throw new Error('Claude API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ CLAUDE_API_KEY –≤ —Ñ–∞–π–ª–µ .env');
    }

    try {
        console.log('ü§ñ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ Claude API...');

        const response = await axios.post<ClaudeResponse>(CLAUDE_API_URL, {
            model: 'claude-3-sonnet-20240229',
            max_tokens: maxTokens,
            messages: messages,
            system: systemPrompt
        }, {
            headers: {
                'Content-Type': 'application/json',
                'x-api-key': CLAUDE_API_KEY,
                'anthropic-version': '2023-06-01'
            }
        });

        console.log('‚úÖ –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç Claude');
        return response.data.content[0].text;
    } catch (error: any) {
        console.error('‚ùå –û—à–∏–±–∫–∞ Claude API:', error.response?.data || error.message);

        if (error.response?.status === 401) {
            throw new Error('–ù–µ–≤–µ—Ä–Ω—ã–π API –∫–ª—é—á Claude. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ CLAUDE_API_KEY –≤ —Ñ–∞–π–ª–µ .env');
        }

        if (error.response) {
            const statusCode = error.response.status || 500;
            const errorMessage = error.response.data?.error?.message || error.message || 'Unknown error';
            throw new Error(`Claude API Error: ${statusCode} - ${errorMessage}`);
        } else if (error.request) {
            throw new Error(`Network Error: ${error.message || 'No response from server'}`);
        } else {
            throw new Error(`Request Error: ${error.message || 'Unknown error'}`);
        }
    }
}

// –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è —á–∞—Ç–∞ (–æ—Å—Ç–∞–µ—Ç—Å—è –¥–ª—è –æ–±—â–µ–Ω–∏—è —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º)
router.post('/chat', async (req, res) => {
    try {
        const { messages, systemPrompt }: { messages: ChatMessage[], systemPrompt?: string } = req.body;

        if (!messages || !Array.isArray(messages)) {
            return res.status(400).json({ error: '–ù–µ–æ–±—Ö–æ–¥–∏–º –º–∞—Å—Å–∏–≤ —Å–æ–æ–±—â–µ–Ω–∏–π' });
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Claude
        if (!isClaudeAvailable) {
            // –í–æ–∑–≤—Ä–∞—â–∞–µ–º fallback –æ—Ç–≤–µ—Ç
            return res.json({
                response: `ü§ñ –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.

–ù–æ –≤—ã –º–æ–∂–µ—Ç–µ:
1. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±—ã—Å—Ç—Ä—ã–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç—á–µ—Ç–æ–≤ –Ω–∏–∂–µ ‚¨áÔ∏è
2. –ù–∞—Å—Ç—Ä–æ–∏—Ç—å Claude API –∫–ª—é—á –≤ —Ñ–∞–π–ª–µ .env

–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è API –∫–ª—é—á–∞:
1. –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –Ω–∞ https://console.anthropic.com
2. –°–æ–∑–¥–∞–π—Ç–µ API –∫–ª—é—á
3. –î–æ–±–∞–≤—å—Ç–µ –µ–≥–æ –≤ —Ñ–∞–π–ª pdf-renderer/.env:
   CLAUDE_API_KEY=your-key-here`
            });
        }

        const defaultSystemPrompt = `–¢—ã - —ç–∫—Å–ø–µ—Ä—Ç –ø–æ —Å–æ–∑–¥–∞–Ω–∏—é PDF –æ—Ç—á—ë—Ç–æ–≤. –¢–≤–æ—è –∑–∞–¥–∞—á–∞:

1. –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∑–∞–ø—Ä–æ—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—á—ë—Ç–æ–≤
2. –ó–∞–¥–∞–≤–∞—Ç—å —É—Ç–æ—á–Ω—è—é—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è –ª—É—á—à–µ–≥–æ –ø–æ–Ω–∏–º–∞–Ω–∏—è —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π  
3. –ü—Ä–µ–¥–ª–∞–≥–∞—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∏ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –æ—Ç—á—ë—Ç–∞
4. –ë—ã—Ç—å –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–º –∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–º

–í–ê–ñ–ù–û: –û—Ç–≤–µ—á–∞–π –Ω–∞ —Ç–æ–º —è–∑—ã–∫–µ, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–º –ø–∏—à–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:
- –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–∏—à–µ—Ç –Ω–∞ –∞—Ä–∞–±—Å–∫–æ–º - –æ—Ç–≤–µ—á–∞–π –Ω–∞ –∞—Ä–∞–±—Å–∫–æ–º
- –ï—Å–ª–∏ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º - –æ—Ç–≤–µ—á–∞–π –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º
- –ï—Å–ª–∏ –Ω–∞ —Ä—É—Å—Å–∫–æ–º - –æ—Ç–≤–µ—á–∞–π –Ω–∞ —Ä—É—Å—Å–∫–æ–º

–ò—Å–ø–æ–ª—å–∑—É–π —ç–º–æ–¥–∑–∏ –¥–ª—è –ª—É—á—à–µ–≥–æ –≤–æ—Å–ø—Ä–∏—è—Ç–∏—è.`;

        const response = await callClaudeAPI(
            messages,
            systemPrompt || defaultSystemPrompt
        );

        res.json({ response });
    } catch (error: any) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –≤ /chat:', error);
        res.status(500).json({
            error: error.message || '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
        });
    }
});

// –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ DSL (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç –Ω–æ–≤—ã–π dslGenerator)
router.post('/generate-dsl', async (req, res) => {
    try {
        const { conversationHistory, expectedLanguage }: {
            conversationHistory: ChatMessage[],
            expectedLanguage?: SupportedLanguage
        } = req.body;

        if (!conversationHistory || !Array.isArray(conversationHistory)) {
            return res.status(400).json({ error: '–ù–µ–æ–±—Ö–æ–¥–∏–º–∞ –∏—Å—Ç–æ—Ä–∏—è —Ä–∞–∑–≥–æ–≤–æ—Ä–∞' });
        }

        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —è–∑—ã–∫
        const lastUserMessage = conversationHistory
            .filter(msg => msg.role === 'user')
            .pop()?.content || '';

        const detectedLang = expectedLanguage || detectLanguage(lastUserMessage);

        console.log(`üåê –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º DSL –¥–ª—è —è–∑—ã–∫–∞: ${detectedLang}`);

        // –ü—Ä–æ–±—É–µ–º —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —á–µ—Ä–µ–∑ Claude —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω –¥–æ—Å—Ç—É–ø–µ–Ω
        if (isClaudeAvailable) {
            try {
                const dslResult = await generateDSLWithClaude(conversationHistory, detectedLang);

                // –ü—Ä–∏–º–µ–Ω—è–µ–º –∞–≤—Ç–æ–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
                dslResult.dsl = autoFixDSL(dslResult.dsl);

                res.json(dslResult);
                return;
            } catch (claudeError) {
                console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ Claude, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback');
            }
        }

        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä
        const fallbackResult = await dslGenerator.generateDSLFromConversation(
            conversationHistory,
            detectedLang
        );

        // –ü—Ä–∏–º–µ–Ω—è–µ–º –∞–≤—Ç–æ–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        fallbackResult.dsl = autoFixDSL(fallbackResult.dsl);

        res.json(fallbackResult);

    } catch (error: any) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –≤ /generate-dsl:', error);
        res.status(500).json({
            error: error.message || '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
        });
    }
});

// –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∏–¥–±–µ–∫–∞ (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç –Ω–æ–≤—ã–µ —É—Ç–∏–ª–∏—Ç—ã)
router.post('/feedback', async (req, res) => {
    try {
        const { currentDSL, userFeedback }: { currentDSL: any, userFeedback: string } = req.body;

        if (!currentDSL || !userFeedback) {
            return res.status(400).json({ error: '–ù–µ–æ–±—Ö–æ–¥–∏–º—ã currentDSL –∏ userFeedback' });
        }

        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —è–∑—ã–∫ –∏–∑ —Ç–µ–∫—É—â–µ–≥–æ DSL
        let dslLanguage: SupportedLanguage = 'ru';
        if (currentDSL.pages && currentDSL.pages[0]?.elements) {
            const firstTextElement = currentDSL.pages[0].elements
                .find((el: any) => el.type === 'text' && el.content);
            if (firstTextElement) {
                dslLanguage = detectLanguage(firstTextElement.content);
            }
        }

        // –ü—Ä–æ–±—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —á–µ—Ä–µ–∑ Claude —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω –¥–æ—Å—Ç—É–ø–µ–Ω
        if (isClaudeAvailable) {
            try {
                const updatedResult = await processFeedbackWithClaude(
                    currentDSL,
                    userFeedback,
                    dslLanguage
                );

                // –ü—Ä–∏–º–µ–Ω—è–µ–º –∞–≤—Ç–æ–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
                updatedResult.dsl = autoFixDSL(updatedResult.dsl);

                res.json(updatedResult);
                return;
            } catch (claudeError) {
                console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∏–¥–±–µ–∫–∞ —á–µ—Ä–µ–∑ Claude');
            }
        }

        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ–∫—É—â–∏–π DSL
        res.json({
            dsl: currentDSL,
            explanation: '–ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±—ã—Å—Ç—Ä—ã–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç—á–µ—Ç–æ–≤.',
            suggestions: ['–ù–∞—Å—Ç—Ä–æ–π—Ç–µ Claude API –∫–ª—é—á –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞']
        });

    } catch (error: any) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –≤ /feedback:', error);
        res.status(500).json({
            error: error.message || '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
        });
    }
});

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ DSL —á–µ—Ä–µ–∑ Claude
async function generateDSLWithClaude(
    conversationHistory: ChatMessage[],
    expectedLanguage: SupportedLanguage
): Promise<DSLGenerationResult> {
    const languageInstruction = getLanguageInstruction(expectedLanguage);

    const systemPrompt = `–¢—ã - —ç–∫—Å–ø–µ—Ä—Ç –ø–æ —Å–æ–∑–¥–∞–Ω–∏—é DSL —Å—Ç—Ä—É–∫—Ç—É—Ä –¥–ª—è PDF –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞.

${languageInstruction}

–°—Ç—Ä—É–∫—Ç—É—Ä–∞ DSL –¥–æ–ª–∂–Ω–∞ –≤–∫–ª—é—á–∞—Ç—å:
- template: —Ç–∏–ø —à–∞–±–ª–æ–Ω–∞
- defaultDirection: –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ text (ltr/rtl) 
- defaultFont: "DejaVuSans"
- pages: –º–∞—Å—Å–∏–≤ —Å—Ç—Ä–∞–Ω–∏—Ü —Å —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏

–û—Ç–≤–µ—Ç—å –¢–û–õ–¨–ö–û –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON:
{
    "dsl": { DSL —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ },
    "explanation": "–û–±—ä—è—Å–Ω–µ–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –æ—Ç—á—ë—Ç–∞ –Ω–∞ —è–∑—ã–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
    "suggestions": ["–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ 1", "–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ 2", "–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ 3"]
}`;

    const conversationText = conversationHistory
        .map(msg => `${msg.role}: ${msg.content}`)
        .join('\n\n');

    const prompt = `–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Ä–∞–∑–≥–æ–≤–æ—Ä –∏ —Å–æ–∑–¥–∞–π DSL —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–ª—è PDF –æ—Ç—á—ë—Ç–∞:

${conversationText}

${languageInstruction}`;

    const response = await callClaudeAPI([
        { role: 'user', content: prompt }
    ], systemPrompt);

    // –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å JSON –∏–∑ –æ—Ç–≤–µ—Ç–∞
    const jsonMatch = response.match(/\{[\s\S]*\}/);
    if (jsonMatch) {
        return JSON.parse(jsonMatch[0]);
    }

    // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback
    throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –æ—Ç–≤–µ—Ç Claude');
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∏–¥–±–µ–∫–∞ —á–µ—Ä–µ–∑ Claude
async function processFeedbackWithClaude(
    currentDSL: any,
    userFeedback: string,
    language: SupportedLanguage
): Promise<DSLGenerationResult> {
    const systemPrompt = `–¢—ã - —ç–∫—Å–ø–µ—Ä—Ç –ø–æ —É–ª—É—á—à–µ–Ω–∏—é PDF –æ—Ç—á—ë—Ç–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ñ–∏–¥–±–µ–∫–∞.

–ü–æ–ª—É—á–∏ —Ç–µ–∫—É—â—É—é DSL —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∏ —Ñ–∏–¥–±–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∑–∞—Ç–µ–º –ø—Ä–µ–¥–ª–æ–∂–∏ —É–ª—É—á—à–µ–Ω–∏—è.

–ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –°–æ—Ö—Ä–∞–Ω—è–π —è–∑—ã–∫ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ (${language})!

–û—Ç–≤–µ—Ç—å –¢–û–õ–¨–ö–û –≤ JSON —Ñ–æ—Ä–º–∞—Ç–µ:
{
    "dsl": { –æ–±–Ω–æ–≤–ª—ë–Ω–Ω–∞—è DSL —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ },
    "explanation": "–û–±—ä—è—Å–Ω–µ–Ω–∏–µ –≤–Ω–µ—Å—ë–Ω–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π –Ω–∞ —è–∑—ã–∫–µ –æ—Ç—á–µ—Ç–∞",
    "suggestions": ["–¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ 1", "–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ 2"]
}`;

    const prompt = `–¢–µ–∫—É—â–∞—è DSL —Å—Ç—Ä—É–∫—Ç—É—Ä–∞:
${JSON.stringify(currentDSL, null, 2)}

–§–∏–¥–±–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:
${userFeedback}

–£–ª—É—á—à–∏ DSL —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Å–æ–≥–ª–∞—Å–Ω–æ —Ñ–∏–¥–±–µ–∫—É, —Å–æ—Ö—Ä–∞–Ω—è—è –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —è–∑—ã–∫ (${language}).`;

    const response = await callClaudeAPI([
        { role: 'user', content: prompt }
    ], systemPrompt);

    const jsonMatch = response.match(/\{[\s\S]*\}/);
    if (jsonMatch) {
        return JSON.parse(jsonMatch[0]);
    }

    throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ñ–∏–¥–±–µ–∫');
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —è–∑—ã–∫–æ–≤—ã—Ö –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π
function getLanguageInstruction(language: SupportedLanguage): string {
    const instructions: Record<SupportedLanguage, string> = {
        ar: '–ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –í–°–ï —Ç–µ–∫—Å—Ç—ã –≤ DSL –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –¢–û–õ–¨–ö–û –Ω–∞ –∞—Ä–∞–±—Å–∫–æ–º —è–∑—ã–∫–µ!',
        en: 'CRITICAL: ALL texts in DSL must be ONLY in English!',
        ru: '–ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –í–°–ï —Ç–µ–∫—Å—Ç—ã –≤ DSL –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –¢–û–õ–¨–ö–û –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ!'
    };

    return instructions[language];
}

export default router;