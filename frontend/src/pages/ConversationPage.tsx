import { useState, useRef, useEffect } from 'react';
import { useConversation } from '../context/ConversationContext';
import { useNavigate } from 'react-router-dom';
import { simplePdfApiService } from '../services/pdfApi.ts';
import { claudeChatService } from '../services/claudeApi';
import { QUICK_REPORT_TYPES } from '../config/languages';

const ConversationPage = () => {
    const [inputMessage, setInputMessage] = useState('');
    const [isGeneratingPDF, setIsGeneratingPDF] = useState(false);
    const [activeQuickReportType, setActiveQuickReportType] = useState<string | null>(null);
    const { state, dispatch } = useConversation();
    const messagesEndRef = useRef<HTMLDivElement>(null);
    const navigate = useNavigate();

    const scrollToBottom = () => {
        messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });
    };

    useEffect(() => {
        scrollToBottom();
    }, [state.messages]);

    // –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Ñ–æ—Ä–º–∞—Ç –¥–ª—è API
    const getConversationHistory = () => {
        return state.messages.map(msg => ({
            role: msg.role,
            content: msg.content
        }));
    };

    const handleSendMessage = async () => {
        if (!inputMessage.trim() || state.isLoading) return;

        const userMessage = {
            id: Date.now().toString(),
            role: 'user' as const,
            content: inputMessage.trim(),
            timestamp: new Date(),
        };

        dispatch({ type: 'ADD_MESSAGE', payload: userMessage });
        setInputMessage('');
        dispatch({ type: 'SET_LOADING', payload: true });

        try {
            console.log('ü§ñ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ Claude API...');

            // –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
            const conversationHistory = getConversationHistory();

            // –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç Claude
            const aiResponse = await claudeChatService.analyzeUserRequest(
                userMessage.content,
                conversationHistory
            );

            const aiMessage = {
                id: (Date.now() + 1).toString(),
                role: 'assistant' as const,
                content: aiResponse,
                timestamp: new Date(),
            };

            dispatch({ type: 'ADD_MESSAGE', payload: aiMessage });
            console.log('‚úÖ –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç Claude');

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ Claude API:', error);

            const errorMessage = {
                id: (Date.now() + 1).toString(),
                role: 'assistant' as const,
                content: `‚ùå –ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ –ò–ò: ${error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}
                
–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:
- –ü—Ä–æ–±–ª–µ–º–∞ —Å API –∫–ª—é—á–æ–º Claude
- –°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞
- –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤

–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±—ã—Å—Ç—Ä—ã–µ –∫–Ω–æ–ø–∫–∏ —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç—á—ë—Ç–æ–≤ –Ω–∏–∂–µ.`,
                timestamp: new Date(),
            };

            dispatch({ type: 'ADD_MESSAGE', payload: errorMessage });
        } finally {
            dispatch({ type: 'SET_LOADING', payload: false });
        }
    };

    const handleKeyDown = (e: React.KeyboardEvent) => {
        if (e.key === 'Enter' && !e.shiftKey) {
            e.preventDefault();
            handleSendMessage();
        }
    };

    const handleGeneratePDF = async (useConversation = true) => {
        if (isGeneratingPDF) return;

        console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é PDF...');
        setIsGeneratingPDF(true);
        dispatch({ type: 'SET_LOADING', payload: true });

        try {
            // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ
            const request = {
                conversationHistory: useConversation ? getConversationHistory() : [],
                userMessage: state.messages
                    .filter(m => m.role === 'user')
                    .pop()?.content
            };

            console.log('üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–µ—Ä–≤–µ—Ä –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞...');
            const result = await simplePdfApiService.generateReport(request);

            if (result.success && result.pdfBlob) {
                dispatch({ type: 'SET_PDF_BLOB', payload: result.pdfBlob });

                const successMessage = {
                    id: Date.now().toString(),
                    role: 'assistant' as const,
                    content: `‚úÖ **PDF –æ—Ç—á—ë—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!**

üìÑ –†–∞–∑–º–µ—Ä: ${(result.pdfBlob.size / 1024).toFixed(1)} KB

–ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞...`,
                    timestamp: new Date(),
                };
                dispatch({ type: 'ADD_MESSAGE', payload: successMessage });

                setTimeout(() => navigate('/preview'), 1500);
            } else {
                throw new Error(result.error || '–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ PDF');
            }
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ PDF:', error);
            const errorMessage = {
                id: Date.now().toString(),
                role: 'assistant' as const,
                content: `‚ùå **–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ PDF:**

${error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}

**–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:**
- PDF –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É 3001
- –ü—Ä–æ–±–ª–µ–º–∞ —Å —Å–µ—Ç–µ–≤—ã–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º  
- –ü—Ä–æ–±–ª–µ–º–∞ —Å Claude API

**–†–µ—à–µ–Ω–∏—è:**
- –ó–∞–ø—É—Å—Ç–∏—Ç–µ PDF –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä: \`npm start\`
- –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É
- –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±—ã—Å—Ç—Ä—ã–µ –∫–Ω–æ–ø–∫–∏ —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç—á—ë—Ç–æ–≤`,
                timestamp: new Date(),
            };
            dispatch({ type: 'ADD_MESSAGE', payload: errorMessage });
        } finally {
            setIsGeneratingPDF(false);
            dispatch({ type: 'SET_LOADING', payload: false });
        }
    };

    const handleRequestChanges = async () => {
        const changeRequest = prompt('–ö–∞–∫–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤—ã —Ö–æ—Ç–∏—Ç–µ –≤–Ω–µ—Å—Ç–∏ –≤ –æ—Ç—á—ë—Ç?');
        if (!changeRequest) return;

        const userMessage = {
            id: Date.now().toString(),
            role: 'user' as const,
            content: `–í–Ω–µ—Å—Ç–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è: ${changeRequest}`,
            timestamp: new Date(),
        };

        dispatch({ type: 'ADD_MESSAGE', payload: userMessage });
        dispatch({ type: 'SET_LOADING', payload: true });

        try {
            if (state.generatedDSL) {
                console.log('üîÑ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∏–¥–±–µ–∫ –Ω–∞ —Å–µ—Ä–≤–µ—Ä...');

                const result = await simplePdfApiService.sendFeedback({
                    currentDSL: state.generatedDSL,
                    userFeedback: changeRequest
                });

                if (result.success) {
                    const responseMessage = {
                        id: (Date.now() + 1).toString(),
                        role: 'assistant' as const,
                        content: `‚úÖ **–ò–∑–º–µ–Ω–µ–Ω–∏—è —É—á—Ç–µ–Ω—ã!**

${result.explanation}

**–û–±–Ω–æ–≤–ª–µ–Ω–∏—è:**
${result.suggestions?.map(s => `‚Ä¢ ${s}`).join('\n')}

–•–æ—Ç–∏—Ç–µ –ø–µ—Ä–µ—Å–æ–∑–¥–∞—Ç—å PDF —Å —É—á—ë—Ç–æ–º –∏–∑–º–µ–Ω–µ–Ω–∏–π?`,
                        timestamp: new Date(),
                    };

                    dispatch({ type: 'ADD_MESSAGE', payload: responseMessage });
                    dispatch({ type: 'SET_DSL', payload: result.dsl });
                } else {
                    throw new Error(result.error || '–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ñ–∏–¥–±–µ–∫');
                }
            } else {
                throw new Error('–ù–µ—Ç —Ç–µ–∫—É—â–µ–π DSL —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è');
            }
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∏–¥–±–µ–∫–∞:', error);

            const errorMessage = {
                id: (Date.now() + 1).toString(),
                role: 'assistant' as const,
                content: `‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∑–∞–ø—Ä–æ—Å –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è: ${error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}

–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –∑–∞–ø—Ä–æ—Å –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –æ—Ç—á—ë—Ç.`,
                timestamp: new Date(),
            };

            dispatch({ type: 'ADD_MESSAGE', payload: errorMessage });
        } finally {
            dispatch({ type: 'SET_LOADING', payload: false });
        }
    };

    const handleQuickReport = async (reportType: string, title: string) => {
        if (activeQuickReportType === reportType || state.isLoading) {
            console.log('‚ö†Ô∏è –ó–∞–ø—Ä–æ—Å —É–∂–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –∫–ª–∏–∫');
            return;
        }

        setActiveQuickReportType(reportType);

        console.log('üéØ –°–æ–∑–¥–∞—ë–º –±—ã—Å—Ç—Ä—ã–π –æ—Ç—á—ë—Ç —Ç–∏–ø–∞:', reportType);

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–∏–ø –æ—Ç—á–µ—Ç–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä, –æ–Ω —Å–∞–º –æ–ø—Ä–µ–¥–µ–ª–∏—Ç —è–∑—ã–∫ –∏ —Å–æ–∑–¥–∞—Å—Ç –Ω—É–∂–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç
        dispatch({ type: 'SET_LOADING', payload: true });

        try {
            const result = await simplePdfApiService.generateReport({
                quickReportType: reportType
            });

            if (result.success && result.pdfBlob) {
                dispatch({ type: 'SET_PDF_BLOB', payload: result.pdfBlob });

                const successMessage = {
                    id: Date.now().toString(),
                    role: 'assistant' as const,
                    content: `‚úÖ **${title} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!**

üìÑ –†–∞–∑–º–µ—Ä: ${(result.pdfBlob.size / 1024).toFixed(1)} KB

–ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞...`,
                    timestamp: new Date(),
                };
                dispatch({ type: 'ADD_MESSAGE', payload: successMessage });

                setTimeout(() => navigate('/preview'), 1500);
            } else {
                throw new Error(result.error || '–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞');
            }
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±—ã—Å—Ç—Ä–æ–≥–æ –æ—Ç—á–µ—Ç–∞:', error);

            const errorMessage = {
                id: (Date.now() + 1).toString(),
                role: 'assistant' as const,
                content: `‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –æ—Ç—á–µ—Ç: ${error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`,
                timestamp: new Date(),
            };

            dispatch({ type: 'ADD_MESSAGE', payload: errorMessage });
        } finally {
            dispatch({ type: 'SET_LOADING', payload: false });
            setActiveQuickReportType(null);
        }
    };

    const suggestedPrompts = [
        "–°–æ–∑–¥–∞—Ç—å –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤—ã–π –æ—Ç—á—ë—Ç —Å –∞–Ω–∞–ª–∏–∑–æ–º ROI –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –∫–≤–∞—Ä—Ç–∞–ª",
        "–ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å —Ñ–∏–Ω–∞–Ω—Å–æ–≤—É—é —Å–≤–æ–¥–∫—É —Å –ø—Ä–æ–≥–Ω–æ–∑–∞–º–∏ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –≥–æ–¥",
        "–ê–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–π –æ—Ç—á—ë—Ç –ø–æ –ø—Ä–æ–¥–∞–∂–∞–º —Å –≥—Ä–∞—Ñ–∏–∫–∞–º–∏ –¥–∏–Ω–∞–º–∏–∫–∏",
        "–ü—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞ –¥–ª—è —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–∞"
    ];

    return (
        <div className="chat-container">
            <div className="chat-header">
                <h1>ü§ñ –ò–ò –ü–æ–º–æ—â–Ω–∏–∫ Claude</h1>
                <p>–û–ø–∏—à–∏—Ç–µ, –∫–∞–∫–æ–π –æ—Ç—á—ë—Ç –≤–∞–º –Ω—É–∂–µ–Ω, –∏ —è —Å–æ–∑–¥–∞–º –µ–≥–æ —Å –ø–æ–º–æ—â—å—é –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞</p>
            </div>

            <div className="chat-messages">
                {state.messages.length === 0 ? (
                    <div className="welcome-section">
                        <div className="welcome-message">
                            <h2>üëã –ü—Ä–∏–≤–µ—Ç! –Ø Claude, –≤–∞—à –ò–ò-–ø–æ–º–æ—â–Ω–∏–∫ –ø–æ —Å–æ–∑–¥–∞–Ω–∏—é PDF –æ—Ç—á—ë—Ç–æ–≤</h2>
                            <p>–ü—Ä–æ—Å—Ç–æ –æ–ø–∏—à–∏—Ç–µ, —á—Ç–æ –≤–∞–º –Ω—É–∂–Ω–æ, –∏ —è —Å–æ–∑–¥–∞–º –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á—ë—Ç —Å —É—á—ë—Ç–æ–º –≤—Å–µ—Ö –≤–∞—à–∏—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π</p>

                            <div className="suggested-prompts">
                                <h3>üí° –ü—Ä–∏–º–µ—Ä—ã –∑–∞–ø—Ä–æ—Å–æ–≤:</h3>
                                {suggestedPrompts.map((prompt, index) => (
                                    <button
                                        key={index}
                                        className="prompt-button"
                                        onClick={() => setInputMessage(prompt)}
                                        disabled={state.isLoading}
                                    >
                                        {prompt}
                                    </button>
                                ))}
                            </div>
                        </div>
                    </div>
                ) : (
                    <div className="messages-list">
                        {state.messages.map((message) => (
                            <div
                                key={message.id}
                                className={`message ${message.role === 'user' ? 'user-message' : 'ai-message'}`}
                            >
                                <div className="message-avatar">
                                    {message.role === 'user' ? 'üë§' : 'ü§ñ'}
                                </div>
                                <div className="message-content">
                                    <div className="message-text">
                                        {message.content}
                                    </div>
                                    {message.role === 'assistant' && !state.isLoading && (
                                        <div className="message-actions">
                                            <button
                                                className="action-button primary"
                                                onClick={() => handleGeneratePDF(true)}
                                                disabled={isGeneratingPDF}
                                            >
                                                {isGeneratingPDF ? '‚è≥ –°–æ–∑–¥–∞—é...' : 'üìÑ –°–æ–∑–¥–∞—Ç—å PDF'}
                                            </button>
                                            {state.generatedDSL && (
                                                <button
                                                    className="action-button secondary"
                                                    onClick={handleRequestChanges}
                                                    disabled={state.isLoading}
                                                >
                                                    ‚úèÔ∏è –í–Ω–µ—Å—Ç–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è
                                                </button>
                                            )}
                                            <button
                                                className="action-button secondary"
                                                onClick={() => setInputMessage('–†–∞—Å—Å–∫–∞–∂–∏ –ø–æ–¥—Ä–æ–±–Ω–µ–µ –æ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ –æ—Ç—á—ë—Ç–∞')}
                                                disabled={state.isLoading}
                                            >
                                                ‚ùì –£—Ç–æ—á–Ω–∏—Ç—å –¥–µ—Ç–∞–ª–∏
                                            </button>
                                        </div>
                                    )}
                                    <div className="message-time">
                                        {message.timestamp.toLocaleTimeString()}
                                    </div>
                                </div>
                            </div>
                        ))}

                        {state.isLoading && (
                            <div className="message ai-message">
                                <div className="message-avatar">ü§ñ</div>
                                <div className="message-content">
                                    <div className="typing-indicator">
                                        <span></span>
                                        <span></span>
                                        <span></span>
                                    </div>
                                </div>
                            </div>
                        )}

                        {/* –ë—ã—Å—Ç—Ä—ã–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç—á—ë—Ç–æ–≤ */}
                        {state.messages.length > 0 && !state.isLoading && (
                            <div className="quick-reports">
                                <h3>‚ö° –ë—ã—Å—Ç—Ä–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—á—ë—Ç–æ–≤:</h3>
                                <div className="quick-reports-grid">
                                    {QUICK_REPORT_TYPES.map((report) => (
                                        <button
                                            key={report.type}
                                            className="quick-report-btn"
                                            onClick={() => handleQuickReport(report.type, report.title)}
                                            disabled={state.isLoading || activeQuickReportType === report.type}
                                            style={{
                                                opacity: activeQuickReportType === report.type ? 0.5 : 1,
                                                cursor: activeQuickReportType === report.type ? 'not-allowed' : 'pointer'
                                            }}
                                        >
                                            <div className="quick-report-title">
                                                {activeQuickReportType === report.type && '‚è≥ '}
                                                {report.title}
                                            </div>
                                            <div className="quick-report-desc">{report.description}</div>
                                        </button>
                                    ))}
                                </div>
                            </div>
                        )}
                    </div>
                )}
                <div ref={messagesEndRef} />
            </div>

            <div className="chat-input">
                <div className="input-container">
                    <textarea
                        value={inputMessage}
                        onChange={(e) => setInputMessage(e.target.value)}
                        onKeyDown={handleKeyDown}
                        placeholder="–û–ø–∏—à–∏—Ç–µ, –∫–∞–∫–æ–π –æ—Ç—á—ë—Ç –≤–∞–º –Ω—É–∂–µ–Ω..."
                        className="message-input"
                        rows={3}
                        disabled={state.isLoading}
                    />
                    <button
                        onClick={() => handleSendMessage()}
                        disabled={!inputMessage.trim() || state.isLoading}
                        className="send-button"
                    >
                        {state.isLoading ? '‚è≥' : 'üöÄ'}
                    </button>
                </div>
            </div>
        </div>
    );
};

export default ConversationPage;