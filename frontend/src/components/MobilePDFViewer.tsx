// frontend/src/components/MobilePDFViewer.tsx

import { useState, useEffect } from 'react';

interface MobilePDFViewerProps {
    pdfBlob: Blob;
    fileSize: number;
    language: 'ru' | 'en' | 'ar';
}

const MobilePDFViewer = ({ pdfBlob, fileSize, language }: MobilePDFViewerProps) => {
    const [pdfUrl, setPdfUrl] = useState<string | null>(null);
    const [isDownloading, setIsDownloading] = useState(false);

    useEffect(() => {
        if (pdfBlob) {
            const url = URL.createObjectURL(pdfBlob);
            setPdfUrl(url);
            return () => URL.revokeObjectURL(url);
        }
    }, [pdfBlob]);

    const translations = {
        ru: {
            title: 'PDF –≥–æ—Ç–æ–≤ –∫ —Å–∫–∞—á–∏–≤–∞–Ω–∏—é',
            description: '–ù–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö PDF –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç—Å—è –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏',
            downloadBtn: '–°–∫–∞—á–∞—Ç—å PDF',
            openBtn: '–û—Ç–∫—Ä—ã—Ç—å PDF',
            shareBtn: '–ü–æ–¥–µ–ª–∏—Ç—å—Å—è',
            fileSize: '–†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞',
            created: '–°–æ–∑–¥–∞–Ω',
            downloading: '–ó–∞–≥—Ä—É–∑–∫–∞...',
            downloadComplete: '–ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!'
        },
        en: {
            title: 'PDF is ready',
            description: 'On mobile devices, PDF opens in a separate app',
            downloadBtn: 'Download PDF',
            openBtn: 'Open PDF',
            shareBtn: 'Share',
            fileSize: 'File size',
            created: 'Created',
            downloading: 'Downloading...',
            downloadComplete: 'Download complete!'
        },
        ar: {
            title: 'PDF ÿ¨ÿßŸáÿ≤ ŸÑŸÑÿ™ŸÜÿ≤ŸäŸÑ',
            description: 'ÿπŸÑŸâ ÿßŸÑÿ£ÿ¨Ÿáÿ≤ÿ© ÿßŸÑŸÖÿ≠ŸÖŸàŸÑÿ©ÿå Ÿäÿ™ŸÖ ŸÅÿ™ÿ≠ PDF ŸÅŸä ÿ™ÿ∑ÿ®ŸäŸÇ ŸÖŸÜŸÅÿµŸÑ',
            downloadBtn: 'ÿ™ÿ≠ŸÖŸäŸÑ PDF',
            openBtn: 'ŸÅÿ™ÿ≠ PDF',
            shareBtn: 'ŸÖÿ¥ÿßÿ±ŸÉÿ©',
            fileSize: 'ÿ≠ÿ¨ŸÖ ÿßŸÑŸÖŸÑŸÅ',
            created: 'ÿ™ŸÖ ÿßŸÑÿ•ŸÜÿ¥ÿßÿ°',
            downloading: 'ÿ¨ÿßÿ±Ÿä ÿßŸÑÿ™ÿ≠ŸÖŸäŸÑ...',
            downloadComplete: 'ÿßŸÉÿ™ŸÖŸÑ ÿßŸÑÿ™ÿ≠ŸÖŸäŸÑ!'
        }
    };

    const t = translations[language];

    const handleDownload = () => {
        if (!pdfUrl) return;

        setIsDownloading(true);

        const link = document.createElement('a');
        link.href = pdfUrl;
        const reportName = language === 'en' ? 'report' : language === 'ar' ? 'ÿ™ŸÇÿ±Ÿäÿ±' : '–æ—Ç—á–µ—Ç';
        link.download = `${reportName}-${new Date().toISOString().slice(0, 10)}.pdf`;
        document.body.appendChild(link);
        link.click();
        document.body.removeChild(link);

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–µ
        setTimeout(() => {
            setIsDownloading(false);
        }, 2000);
    };

    const handleOpen = () => {
        if (!pdfUrl) return;

        // –û—Ç–∫—Ä—ã–≤–∞–µ–º PDF –≤ –Ω–æ–≤–æ–π –≤–∫–ª–∞–¥–∫–µ
        window.open(pdfUrl, '_blank');
    };

    return (
        <div className="mobile-pdf-viewer">
            <div className="pdf-preview-card">
                <div className="pdf-icon">
                    üìÑ
                </div>

                <h2 className="pdf-title">{t.title}</h2>
                <p className="pdf-description">{t.description}</p>

                <div className="pdf-info-grid">
                    <div className="pdf-info-item">
                        <span className="info-icon">üìä</span>
                        <span className="info-label">{t.fileSize}</span>
                        <span className="info-value">{(fileSize / 1024).toFixed(1)} KB</span>
                    </div>
                    <div className="pdf-info-item">
                        <span className="info-icon">üìÖ</span>
                        <span className="info-label">{t.created}</span>
                        <span className="info-value">{new Date().toLocaleDateString(
                            language === 'ar' ? 'ar-SA' : language === 'en' ? 'en-US' : 'ru-RU'
                        )}</span>
                    </div>
                </div>

                <div className="pdf-actions">
                    <button
                        className="pdf-action-btn primary"
                        onClick={handleDownload}
                        disabled={isDownloading}
                    >
                        {isDownloading ? (
                            <>
                                <span className="loading-spinner-inline"></span>
                                {t.downloading}
                            </>
                        ) : (
                            <>
                                üíæ {t.downloadBtn}
                            </>
                        )}
                    </button>

                    <button
                        className="pdf-action-btn secondary"
                        onClick={handleOpen}
                    >
                        üëÅÔ∏è {t.openBtn}
                    </button>
                </div>
            </div>

        </div>
    );
};

export default MobilePDFViewer;