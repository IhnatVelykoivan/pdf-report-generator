// frontend/src/services/claudeApi.ts
// –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å —á–∞—Ç–∞

export interface ChatMessage {
    role: 'user' | 'assistant';
    content: string;
}

class ClaudeChatService {
    private readonly baseUrl: string;

    constructor() {
        this.baseUrl = import.meta.env.VITE_PDF_API_URL || 'http://localhost:3001';
        console.log('üîó Claude Chat API —á–µ—Ä–µ–∑ –±—ç–∫-—ç–Ω–¥:', this.baseUrl);
    }

    /**
     * –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç —Å Claude
     * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –¥–ª—è –æ–±—â–µ–Ω–∏—è —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º, –Ω–µ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ DSL
     */
    async sendMessage(messages: ChatMessage[], systemPrompt?: string): Promise<string> {
        try {
            console.log('üöÄ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç...');

            const response = await fetch(`${this.baseUrl}/api/claude/chat`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    messages,
                    systemPrompt
                }),
            });

            if (!response.ok) {
                const errorData = await response.json().catch(() => null);
                throw new Error(`Backend Error: ${response.status} - ${errorData?.error || response.statusText}`);
            }

            const data = await response.json();
            console.log('‚úÖ –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç Claude');

            return data.response;
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ Claude Chat API:', error);
            throw error;
        }
    }

    /**
     * –ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —á–∞—Ç–∞
     * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —á–∞—Ç–µ
     */
    async analyzeUserRequest(userMessage: string, conversationHistory: ChatMessage[] = []): Promise<string> {
        const messages: ChatMessage[] = [
            ...conversationHistory,
            { role: 'user', content: userMessage }
        ];

        return await this.sendMessage(messages);
    }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —Å–µ—Ä–≤–∏—Å –¥–ª—è —á–∞—Ç–∞
export const claudeChatService = new ClaudeChatService();

// –°—Ç–∞—Ä—ã–µ —ç–∫—Å–ø–æ—Ä—Ç—ã —É–¥–∞–ª–µ–Ω—ã:
// - DSLGenerationResult
// - ClaudeApiService —Å –º–µ—Ç–æ–¥–∞–º–∏ generateDSLFromConversation, requestFeedback –∏ —Ç.–¥.
// –í—Å—è –ª–æ–≥–∏–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ DSL —Ç–µ–ø–µ—Ä—å –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ!