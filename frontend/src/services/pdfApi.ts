// API —Å–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å PDF –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–æ–º
import type { SupportedLanguage } from '../config/languages';

export interface PDFGenerationRequest {
    reportType: string;
    title: string;
    description?: string;
    sections?: any[];
    language?: SupportedLanguage;
    actualReportType?: string;
}

export interface PDFGenerationResponse {
    success: boolean;
    pdfUrl?: string;
    pdfBlob?: Blob;
    error?: string;
}

type InternalLanguage = 'russian' | 'english' | 'arabic';

class PDFApiService {
    private readonly baseUrl: string;

    constructor() {
        // URL –≤–∞—à–µ–≥–æ PDF –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ (–ø–æ—Ä—Ç 3001)
        this.baseUrl = import.meta.env.VITE_PDF_API_URL || 'http://localhost:3001';
        console.log('üîó PDF API URL:', this.baseUrl);
    }

    async generatePDF(request: PDFGenerationRequest): Promise<PDFGenerationResponse> {
        try {
            console.log('üöÄ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º DSL –¥–ª—è:', request);

            // –°–æ–∑–¥–∞—ë–º DSL —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–ª—è –≤–∞—à–µ–≥–æ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞
            const dsl = this.createDSLFromRequest(request);
            console.log('üìÑ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π DSL:', JSON.stringify(dsl, null, 2));

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º DSL –Ω–∞ –≤–∞—à —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π API
            const response = await fetch(`${this.baseUrl}/api/render`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ dsl }),
            });

            console.log('üì° –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', response.status, response.statusText);

            if (!response.ok) {
                const errorData = await response.json().catch(() => null);
                const errorMessage = errorData?.message || `HTTP error! status: ${response.status}`;
                return {
                    success: false,
                    error: errorMessage
                };
            }

            // –ü–æ–ª—É—á–∞–µ–º PDF –∫–∞–∫ blob
            const pdfBlob = await response.blob();
            console.log('üì¶ PDF blob –ø–æ–ª—É—á–µ–Ω, —Ä–∞–∑–º–µ—Ä:', pdfBlob.size, 'bytes');

            return {
                success: true,
                pdfBlob,
                pdfUrl: URL.createObjectURL(pdfBlob)
            };

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ PDF:', error);
            return {
                success: false,
                error: error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'
            };
        }
    }

    // –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ DSL —Å—Ç—Ä—É–∫—Ç—É—Ä—É
    async generateDSLFromText(userText: string): Promise<any> {
        return this.createDSLFromRequest({
            reportType: this.detectReportType(userText),
            title: this.extractTitle(userText),
            description: userText
        });
    }

    private createDSLFromRequest(request: PDFGenerationRequest): any {
        // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º SupportedLanguage –≤ InternalLanguage
        const convertLanguage = (lang?: SupportedLanguage): InternalLanguage => {
            if (!lang) return this.detectLanguage(request.description || request.title);

            switch (lang) {
                case 'ru': return 'russian';
                case 'en': return 'english';
                case 'ar': return 'arabic';
                default: return 'english';
            }
        };

        const language = convertLanguage(request.language);
        const reportType = request.actualReportType || request.reportType;
        const isRTL = language === 'arabic';

        console.log('üåê –û–ø—Ä–µ–¥–µ–ª—ë–Ω —è–∑—ã–∫:', language, '–¥–ª—è —Ç–µ–∫—Å—Ç–∞:', request.description);
        console.log('üìÑ –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–∏–ø –æ—Ç—á—ë—Ç–∞:', reportType);

        const dsl = {
            template: 'default',
            defaultFont: 'DejaVuSans',
            defaultDirection: isRTL ? 'rtl' : 'ltr',
            pages: [
                {
                    elements: [
                        // –ó–∞–≥–æ–ª–æ–≤–æ–∫ –æ—Ç—á—ë—Ç–∞
                        this.createTextElement(request.title, { x: 50, y: 100 }, {
                            fontSize: 24,
                            color: '#2C3E50',
                            width: 495,
                            align: 'center'
                        }, language),

                        // –û–ø–∏—Å–∞–Ω–∏–µ
                        this.createTextElement(
                            request.description || this.getDefaultDescription(language),
                            { x: 50, y: 170 },
                            {
                                fontSize: 12,
                                color: '#34495E',
                                width: 495,
                                lineBreak: true
                            },
                            language
                        ),

                        // –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç
                        this.createTextElement(
                            this.generateMainContent(reportType, language),
                            { x: 50, y: 220 },
                            {
                                fontSize: 11,
                                color: '#2C3E50',
                                width: 495,
                                lineBreak: true
                            },
                            language
                        ),

                        // –ü—Ä–∏–º–µ—Ä –≥—Ä–∞—Ñ–∏–∫–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π RTL
                        this.createChartElement(reportType, language, { x: 50, y: 430 }),

                        // –ó–∞–∫–ª—é—á–µ–Ω–∏–µ
                        this.createTextElement(
                            this.generateConclusion(language),
                            { x: 50, y: 700 },
                            {
                                fontSize: 11,
                                color: '#7F8C8D',
                                width: 495,
                                lineBreak: true
                            },
                            language
                        )
                    ],
                    style: {
                        size: 'a4',
                        margin: { top: 70, bottom: 70, left: 50, right: 50 }
                    }
                }
            ]
        };

        // –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –ü–æ—Å—Ç-–æ–±—Ä–∞–±–æ—Ç–∫–∞ DSL –¥–ª—è –≥–∞—Ä–∞–Ω—Ç–∏–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö —à—Ä–∏—Ñ—Ç–æ–≤
        return this.ensureProperFontsAndDirection(dsl);
    }

    // –ù–æ–≤—ã–π –º–µ—Ç–æ–¥ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ —Å –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ —à—Ä–∏—Ñ—Ç–∞–º–∏
    private createTextElement(content: string, position: {x: number, y: number}, style: any, language: InternalLanguage) {
        const isRTL = language === 'arabic';

        return {
            type: 'text',
            content: content,
            position: position,
            style: {
                ...style,
                font: this.getFontForLanguage(language, content),
                direction: isRTL ? 'rtl' : 'ltr',
                align: style.align || (isRTL ? 'right' : (style.align || 'left'))
            }
        };
    }

    // –ù–æ–≤—ã–π –º–µ—Ç–æ–¥ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π RTL
    private createChartElement(reportType: string, language: InternalLanguage, position: {x: number, y: number}) {
        const chartData = this.generateSampleChart(reportType, language);
        const isRTL = language === 'arabic';

        // –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏ —à—Ä–∏—Ñ—Ç –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞ (–∫–∞–∫ –≤ —Ä–∞–±–æ—á–µ–º —Ç–µ—Å—Ç–µ)
        chartData.options = {
            ...chartData.options,
            rtl: isRTL,
            font: {
                family: this.getFontForLanguage(language, chartData.title || ''),
                size: 12
            }
        };

        // –î–æ–±–∞–≤–ª—è–µ–º textDirection –∫–∞–∫ –≤ —Ä–∞–±–æ—á–µ–º —Ç–µ—Å—Ç–µ
        if (isRTL) {
            chartData.textDirection = 'rtl';
        }

        return {
            type: 'chart',
            content: chartData,
            position: position,
            style: {
                width: 495,
                height: 250,
                backgroundColor: '#FFFFFF',
                borderColor: '#BDC3C7',
                direction: isRTL ? 'rtl' : 'ltr'
            }
        };
    }

    // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —à—Ä–∏—Ñ—Ç–∞ –¥–ª—è —è–∑—ã–∫–∞ –∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ (–æ—Å–Ω–æ–≤–∞–Ω–æ –Ω–∞ —Ä–∞–±–æ—á–µ–º —Ç–µ—Å—Ç–µ)
    private getFontForLanguage(language: InternalLanguage, content: string = ''): string {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –∞—Ä–∞–±—Å–∫–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤
        const hasArabic = /[\u0600-\u06FF\u0750-\u077F\u08A0-\u08FF]/.test(content);

        if (language === 'arabic' || hasArabic) {
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º DejaVuSans –∫–∞–∫ –≤ —Ä–∞–±–æ—á–µ–º —Ç–µ—Å—Ç–µ (–∞ –Ω–µ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∞—Ä–∞–±—Å–∫–∏–π —à—Ä–∏—Ñ—Ç)
            return 'DejaVuSans';
        }

        // –î–ª—è —Ä—É—Å—Å–∫–æ–≥–æ –∏ –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º DejaVuSans (–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∫–∏—Ä–∏–ª–ª–∏—Ü—É)
        return 'DejaVuSans';
    }

    // –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–ê–Ø —Ñ—É–Ω–∫—Ü–∏—è: –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ —à—Ä–∏—Ñ—Ç—ã –¥–ª—è –≤—Å–µ—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    private ensureProperFontsAndDirection(dsl: any): any {
        console.log('üîß –ü—Ä–∏–º–µ–Ω—è–µ–º –ø–æ—Å—Ç-–æ–±—Ä–∞–±–æ—Ç–∫—É DSL –¥–ª—è –≥–∞—Ä–∞–Ω—Ç–∏–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö —à—Ä–∏—Ñ—Ç–æ–≤...');

        if (!dsl.pages || !Array.isArray(dsl.pages)) {
            return dsl;
        }

        for (const page of dsl.pages) {
            if (!page.elements || !Array.isArray(page.elements)) {
                continue;
            }

            for (const element of page.elements) {
                if (element.type === 'text' && element.content) {
                    const content = String(element.content);
                    const hasArabic = /[\u0600-\u06FF\u0750-\u077F\u08A0-\u08FF]/.test(content);

                    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º style –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
                    if (!element.style) {
                        element.style = {};
                    }

                    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —à—Ä–∏—Ñ—Ç (–∏—Å–ø–æ–ª—å–∑—É–µ–º DejaVuSans –∫–∞–∫ –≤ —Ä–∞–±–æ—á–µ–º —Ç–µ—Å—Ç–µ)
                    if (hasArabic) {
                        element.style.font = 'DejaVuSans';
                        element.style.direction = 'rtl';
                        if (!element.style.align || element.style.align === 'left') {
                            element.style.align = 'right';
                        }
                    } else {
                        // –î–ª—è —Ä—É—Å—Å–∫–æ–≥–æ –∏ –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ
                        element.style.font = 'DejaVuSans';
                        element.style.direction = 'ltr';
                    }

                    console.log(`‚úÖ –≠–ª–µ–º–µ–Ω—Ç "${content.substring(0, 30)}...": font=${element.style.font}, direction=${element.style.direction}`);
                }

                // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥—Ä–∞—Ñ–∏–∫–æ–≤
                if (element.type === 'chart' && element.content) {
                    const chart = element.content;

                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –≥—Ä–∞—Ñ–∏–∫–∞
                    if (chart.title) {
                        const hasArabic = /[\u0600-\u06FF\u0750-\u077F\u08A0-\u08FF]/.test(chart.title);

                        if (!chart.options) {
                            chart.options = {};
                        }

                        chart.options.rtl = hasArabic;
                        chart.options.font = {
                            family: 'DejaVuSans'
                        };

                        // –î–æ–±–∞–≤–ª—è–µ–º textDirection –∫–∞–∫ –≤ —Ä–∞–±–æ—á–µ–º —Ç–µ—Å—Ç–µ
                        if (hasArabic) {
                            chart.textDirection = 'rtl';
                        }
                    }

                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∏ –¥–∞–Ω–Ω—ã—Ö
                    if (chart.data && chart.data.labels) {
                        const hasArabicLabels = chart.data.labels.some((label: string) =>
                            /[\u0600-\u06FF\u0750-\u077F\u08A0-\u08FF]/.test(label)
                        );

                        if (!chart.options) {
                            chart.options = {};
                        }

                        if (hasArabicLabels) {
                            chart.options.rtl = true;
                            chart.options.font = {
                                family: 'DejaVuSans'
                            };
                            chart.textDirection = 'rtl';
                        }
                    }

                    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–ª—è —Å—Ç–∏–ª—è —ç–ª–µ–º–µ–Ω—Ç–∞
                    if (!element.style) {
                        element.style = {};
                    }

                    const isChartRTL = chart.options?.rtl === true;
                    element.style.direction = isChartRTL ? 'rtl' : 'ltr';

                    console.log(`üìä –ì—Ä–∞—Ñ–∏–∫: rtl=${isChartRTL}, font=${chart.options?.font?.family}, textDirection=${chart.textDirection}`);
                }
            }
        }

        console.log('‚úÖ –ü–æ—Å—Ç-–æ–±—Ä–∞–±–æ—Ç–∫–∞ DSL –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
        return dsl;
    }

    private getDefaultDescription(language: InternalLanguage): string {
        const descriptions = {
            russian: '–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—á—ë—Ç–∞',
            english: 'Report description',
            arabic: 'ŸàÿµŸÅ ÿßŸÑÿ™ŸÇÿ±Ÿäÿ±'
        };
        return descriptions[language];
    }

    private detectLanguage(text: string): InternalLanguage {
        if (!text) return 'english';

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∞—Ä–∞–±—Å–∫–∏–π
        if (/[\u0600-\u06FF\u0750-\u077F\u08A0-\u08FF]/.test(text)) {
            return 'arabic';
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ä—É—Å—Å–∫–∏–π
        if (/[–∞-—è—ë]/i.test(text)) {
            return 'russian';
        }

        return 'english';
    }

    private generateConclusion(language: InternalLanguage): string {
        const conclusions = {
            russian: '–ó–∞–∫–ª—é—á–µ–Ω–∏–µ:\n\n–î–∞–Ω–Ω—ã–π –æ—Ç—á—ë—Ç –±—ã–ª –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–∞—à–∏—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π. –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞–º.',
            english: 'Conclusion:\n\nThis report was automatically generated based on your requirements. For more detailed information, please contact our specialists.',
            arabic: 'ÿßŸÑÿÆŸÑÿßÿµÿ©:\n\nÿ™ŸÖ ÿ•ŸÜÿ¥ÿßÿ° Ÿáÿ∞ÿß ÿßŸÑÿ™ŸÇÿ±Ÿäÿ± ÿ™ŸÑŸÇÿßÿ¶ŸäŸãÿß ÿ®ŸÜÿßÿ°Ÿã ÿπŸÑŸâ ŸÖÿ™ÿ∑ŸÑÿ®ÿßÿ™ŸÉŸÖ. ŸÑŸÑÿ≠ÿµŸàŸÑ ÿπŸÑŸâ ŸÖÿπŸÑŸàŸÖÿßÿ™ ÿ£ŸÉÿ´ÿ± ÿ™ŸÅÿµŸäŸÑÿßŸãÿå Ÿäÿ±ÿ¨Ÿâ ÿßŸÑÿßÿ™ÿµÿßŸÑ ÿ®ÿßŸÑŸÖÿÆÿ™ÿµŸäŸÜ.'
        };

        return conclusions[language];
    }

    private generateMainContent(reportType: string, language: InternalLanguage = 'russian'): string {
        const contentMap = {
            russian: {
                marketing: `–ê–ù–ê–õ–ò–¢–ò–ß–ï–°–ö–ò–ô –û–¢–ß–Å–¢ –ü–û –ú–ê–†–ö–ï–¢–ò–ù–ì–£

1. –û–ë–ó–û–† –ú–ê–†–ö–ï–¢–ò–ù–ì–û–í–û–ô –î–ï–Ø–¢–ï–õ–¨–ù–û–°–¢–ò
   ‚Ä¢ –ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—É—â–∏—Ö –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤—ã—Ö –∫–∞–º–ø–∞–Ω–∏–π
   ‚Ä¢ –û—Ü–µ–Ω–∫–∞ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Ä–µ–∫–ª–∞–º–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤
   ‚Ä¢ –ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ —Ü–µ–ª–µ–≤–æ–π –∞—É–¥–∏—Ç–æ—Ä–∏–∏

2. –ö–õ–Æ–ß–ï–í–´–ï –ü–û–ö–ê–ó–ê–¢–ï–õ–ò
   ‚Ä¢ ROI –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤—ã—Ö –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π
   ‚Ä¢ –ö–æ–Ω–≤–µ—Ä—Å–∏—è –ø–æ –∫–∞–Ω–∞–ª–∞–º –ø—Ä–∏–≤–ª–µ—á–µ–Ω–∏—è
   ‚Ä¢ –°—Ç–æ–∏–º–æ—Å—Ç—å –ø—Ä–∏–≤–ª–µ—á–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞

3. –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò
   ‚Ä¢ –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —Ä–µ–∫–ª–∞–º–Ω–æ–≥–æ –±—é–¥–∂–µ—Ç–∞
   ‚Ä¢ –§–æ–∫—É—Å –Ω–∞ –Ω–∞–∏–±–æ–ª–µ–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–µ –∫–∞–Ω–∞–ª—ã
   ‚Ä¢ –£–ª—É—á—à–µ–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞`,

                sales: `–û–¢–ß–Å–¢ –ü–û –ü–†–û–î–ê–ñ–ê–ú

1. –ê–ù–ê–õ–ò–ó –ü–†–û–î–ê–ñ
   ‚Ä¢ –û–±—â–∏–π –æ–±—ä—ë–º –ø—Ä–æ–¥–∞–∂ –∑–∞ –ø–µ—Ä–∏–æ–¥
   ‚Ä¢ –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –ø—Ä–µ–¥—ã–¥—É—â–∏–º–∏ –ø–µ—Ä–∏–æ–¥–∞–º–∏
   ‚Ä¢ –ê–Ω–∞–ª–∏–∑ —Å–µ–∑–æ–Ω–Ω–æ—Å—Ç–∏

2. –≠–§–§–ï–ö–¢–ò–í–ù–û–°–¢–¨ –ö–û–ú–ê–ù–î–´
   ‚Ä¢ –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤
   ‚Ä¢ –ö–æ–Ω–≤–µ—Ä—Å–∏—è –ª–∏–¥–æ–≤ –≤ –ø—Ä–æ–¥–∞–∂–∏
   ‚Ä¢ –°—Ä–µ–¥–Ω–∏–π —á–µ–∫

3. –ü–õ–ê–ù–´ –ò –ü–†–û–ì–ù–û–ó–´
   ‚Ä¢ –¶–µ–ª–∏ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –ø–µ—Ä–∏–æ–¥
   ‚Ä¢ –°—Ç—Ä–∞—Ç–µ–≥–∏–∏ —É–≤–µ–ª–∏—á–µ–Ω–∏—è –ø—Ä–æ–¥–∞–∂
   ‚Ä¢ –ù–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ä–µ—Å—É—Ä—Å—ã`,

                financial: `–§–ò–ù–ê–ù–°–û–í–´–ô –û–¢–ß–Å–¢

1. –§–ò–ù–ê–ù–°–û–í–´–ï –ü–û–ö–ê–ó–ê–¢–ï–õ–ò
   ‚Ä¢ –í—ã—Ä—É—á–∫–∞ –∏ –ø—Ä–∏–±—ã–ª—å
   ‚Ä¢ –†–∞—Å—Ö–æ–¥—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
   ‚Ä¢ –î–µ–Ω–µ–∂–Ω—ã–µ –ø–æ—Ç–æ–∫–∏

2. –ê–ù–ê–õ–ò–ó –†–ï–ù–¢–ê–ë–ï–õ–¨–ù–û–°–¢–ò
   ‚Ä¢ –ú–∞—Ä–∂–∏–Ω–∞–ª—å–Ω–æ—Å—Ç—å –ø—Ä–æ–¥—É–∫—Ç–æ–≤
   ‚Ä¢ –û–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–∞—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
   ‚Ä¢ –¢–æ—á–∫–∞ –±–µ–∑—É–±—ã—Ç–æ—á–Ω–æ—Å—Ç–∏

3. –§–ò–ù–ê–ù–°–û–í–û–ï –ü–õ–ê–ù–ò–†–û–í–ê–ù–ò–ï
   ‚Ä¢ –ë—é–¥–∂–µ—Ç –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –ø–µ—Ä–∏–æ–¥
   ‚Ä¢ –ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã–µ –ø–ª–∞–Ω—ã
   ‚Ä¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∏—Å–∫–∞–º–∏`,

                analytics: `–ê–ù–ê–õ–ò–¢–ò–ß–ï–°–ö–ò–ô –û–¢–ß–Å–¢

1. –°–ë–û–† –ò –ê–ù–ê–õ–ò–ó –î–ê–ù–ù–´–•
   ‚Ä¢ –ò—Å—Ç–æ—á–Ω–∏–∫–∏ –¥–∞–Ω–Ω—ã—Ö
   ‚Ä¢ –ú–µ—Ç–æ–¥–æ–ª–æ–≥–∏—è –∞–Ω–∞–ª–∏–∑–∞
   ‚Ä¢ –ö–ª—é—á–µ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏

2. –í–´–Ø–í–õ–ï–ù–ù–´–ï –¢–†–ï–ù–î–´
   ‚Ä¢ –û—Å–Ω–æ–≤–Ω—ã–µ –∑–∞–∫–æ–Ω–æ–º–µ—Ä–Ω–æ—Å—Ç–∏
   ‚Ä¢ –°—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏
   ‚Ä¢ –ü—Ä–æ–≥–Ω–æ–∑–Ω—ã–µ –º–æ–¥–µ–ª–∏

3. –í–´–í–û–î–´ –ò –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò
   ‚Ä¢ –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
   ‚Ä¢ –ü–ª–∞–Ω –¥–µ–π—Å—Ç–≤–∏–π
   ‚Ä¢ –û–∂–∏–¥–∞–µ–º—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã`,

                general: `–û–ë–©–ò–ô –û–¢–ß–Å–¢

1. –í–í–ï–î–ï–ù–ò–ï
   ‚Ä¢ –¶–µ–ª—å –æ—Ç—á—ë—Ç–∞
   ‚Ä¢ –ú–µ—Ç–æ–¥–æ–ª–æ–≥–∏—è
   ‚Ä¢ –û—Å–Ω–æ–≤–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã

2. –û–°–ù–û–í–ù–ê–Ø –ß–ê–°–¢–¨
   ‚Ä¢ –ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—É—â–µ–π —Å–∏—Ç—É–∞—Ü–∏–∏
   ‚Ä¢ –í—ã—è–≤–ª–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã
   ‚Ä¢ –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è

3. –ó–ê–ö–õ–Æ–ß–ï–ù–ò–ï
   ‚Ä¢ –û—Å–Ω–æ–≤–Ω—ã–µ –≤—ã–≤–æ–¥—ã
   ‚Ä¢ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
   ‚Ä¢ –î–∞–ª—å–Ω–µ–π—à–∏–µ —à–∞–≥–∏`
            },

            english: {
                marketing: `MARKETING ANALYTICS REPORT

1. MARKETING ACTIVITIES OVERVIEW
   ‚Ä¢ Current marketing campaigns analysis
   ‚Ä¢ Advertising channels effectiveness evaluation
   ‚Ä¢ Target audience research

2. KEY PERFORMANCE INDICATORS
   ‚Ä¢ Marketing activities ROI
   ‚Ä¢ Conversion by acquisition channels
   ‚Ä¢ Customer acquisition cost

3. RECOMMENDATIONS
   ‚Ä¢ Marketing budget optimization
   ‚Ä¢ Focus on most effective channels
   ‚Ä¢ Content quality improvement`,

                sales: `SALES REPORT

1. SALES ANALYSIS
   ‚Ä¢ Total sales volume for the period
   ‚Ä¢ Comparison with previous periods
   ‚Ä¢ Seasonality analysis

2. TEAM EFFECTIVENESS
   ‚Ä¢ Managers performance
   ‚Ä¢ Lead to sales conversion
   ‚Ä¢ Average transaction value

3. PLANS AND FORECASTS
   ‚Ä¢ Goals for the next period
   ‚Ä¢ Sales growth strategies
   ‚Ä¢ Required resources`,

                financial: `FINANCIAL REPORT

1. FINANCIAL INDICATORS
   ‚Ä¢ Revenue and profit
   ‚Ä¢ Expenses by categories
   ‚Ä¢ Cash flows

2. PROFITABILITY ANALYSIS
   ‚Ä¢ Product margins
   ‚Ä¢ Operational efficiency
   ‚Ä¢ Break-even point

3. FINANCIAL PLANNING
   ‚Ä¢ Budget for the next period
   ‚Ä¢ Investment plans
   ‚Ä¢ Risk management`,

                analytics: `ANALYTICS REPORT

1. DATA COLLECTION AND ANALYSIS
   ‚Ä¢ Data sources
   ‚Ä¢ Analysis methodology
   ‚Ä¢ Key metrics

2. IDENTIFIED TRENDS
   ‚Ä¢ Main patterns
   ‚Ä¢ Statistical correlations
   ‚Ä¢ Predictive models

3. CONCLUSIONS AND RECOMMENDATIONS
   ‚Ä¢ Practical recommendations
   ‚Ä¢ Action plan
   ‚Ä¢ Expected results`,

                general: `GENERAL REPORT

1. INTRODUCTION
   ‚Ä¢ Report purpose
   ‚Ä¢ Methodology
   ‚Ä¢ Key questions

2. MAIN PART
   ‚Ä¢ Current situation analysis
   ‚Ä¢ Identified problems
   ‚Ä¢ Improvement opportunities

3. CONCLUSION
   ‚Ä¢ Main findings
   ‚Ä¢ Recommendations
   ‚Ä¢ Next steps`
            },

            arabic: {
                marketing: `ÿ™ŸÇÿ±Ÿäÿ± ÿ™ÿ≠ŸÑŸäŸÑ ÿßŸÑÿ™ÿ≥ŸàŸäŸÇ

1. ŸÜÿ∏ÿ±ÿ© ÿπÿßŸÖÿ© ÿπŸÑŸâ ÿßŸÑÿ£ŸÜÿ¥ÿ∑ÿ© ÿßŸÑÿ™ÿ≥ŸàŸäŸÇŸäÿ©
   ‚Ä¢ ÿ™ÿ≠ŸÑŸäŸÑ ÿßŸÑÿ≠ŸÖŸÑÿßÿ™ ÿßŸÑÿ™ÿ≥ŸàŸäŸÇŸäÿ© ÿßŸÑÿ≠ÿßŸÑŸäÿ©
   ‚Ä¢ ÿ™ŸÇŸäŸäŸÖ ŸÅÿπÿßŸÑŸäÿ© ŸÇŸÜŸàÿßÿ™ ÿßŸÑÿ•ÿπŸÑÿßŸÜ
   ‚Ä¢ ÿ®ÿ≠ÿ´ ÿßŸÑÿ¨ŸÖŸáŸàÿ± ÿßŸÑŸÖÿ≥ÿ™ŸáÿØŸÅ

2. ŸÖÿ§ÿ¥ÿ±ÿßÿ™ ÿßŸÑÿ£ÿØÿßÿ° ÿßŸÑÿ±ÿ¶Ÿäÿ≥Ÿäÿ©
   ‚Ä¢ ÿπÿßÿ¶ÿØ ÿßŸÑÿßÿ≥ÿ™ÿ´ŸÖÿßÿ± ŸÑŸÑÿ£ŸÜÿ¥ÿ∑ÿ© ÿßŸÑÿ™ÿ≥ŸàŸäŸÇŸäÿ©
   ‚Ä¢ ÿßŸÑÿ™ÿ≠ŸàŸäŸÑ ÿπÿ®ÿ± ŸÇŸÜŸàÿßÿ™ ÿßŸÑÿßÿ≥ÿ™ÿ≠Ÿàÿßÿ∞
   ‚Ä¢ ÿ™ŸÉŸÑŸÅÿ© ÿßŸÉÿ™ÿ≥ÿßÿ® ÿßŸÑÿπŸÖŸÑÿßÿ°

3. ÿßŸÑÿ™ŸàÿµŸäÿßÿ™
   ‚Ä¢ ÿ™ÿ≠ÿ≥ŸäŸÜ ŸÖŸäÿ≤ÿßŸÜŸäÿ© ÿßŸÑÿ™ÿ≥ŸàŸäŸÇ
   ‚Ä¢ ÿßŸÑÿ™ÿ±ŸÉŸäÿ≤ ÿπŸÑŸâ ÿßŸÑŸÇŸÜŸàÿßÿ™ ÿßŸÑÿ£ŸÉÿ´ÿ± ŸÅÿπÿßŸÑŸäÿ©
   ‚Ä¢ ÿ™ÿ≠ÿ≥ŸäŸÜ ÿ¨ŸàÿØÿ© ÿßŸÑŸÖÿ≠ÿ™ŸàŸâ`,

                sales: `ÿ™ŸÇÿ±Ÿäÿ± ÿßŸÑŸÖÿ®Ÿäÿπÿßÿ™

1. ÿ™ÿ≠ŸÑŸäŸÑ ÿßŸÑŸÖÿ®Ÿäÿπÿßÿ™
   ‚Ä¢ ÿ•ÿ¨ŸÖÿßŸÑŸä ÿ≠ÿ¨ŸÖ ÿßŸÑŸÖÿ®Ÿäÿπÿßÿ™ ŸÑŸÑŸÅÿ™ÿ±ÿ©
   ‚Ä¢ ŸÖŸÇÿßÿ±ŸÜÿ© ŸÖÿπ ÿßŸÑŸÅÿ™ÿ±ÿßÿ™ ÿßŸÑÿ≥ÿßÿ®ŸÇÿ©
   ‚Ä¢ ÿ™ÿ≠ŸÑŸäŸÑ ÿßŸÑŸÖŸàÿ≥ŸÖŸäÿ©

2. ŸÅÿπÿßŸÑŸäÿ© ÿßŸÑŸÅÿ±ŸäŸÇ
   ‚Ä¢ ÿ£ÿØÿßÿ° ÿßŸÑŸÖÿØŸäÿ±ŸäŸÜ
   ‚Ä¢ ÿ™ÿ≠ŸàŸäŸÑ ÿßŸÑÿπŸÖŸÑÿßÿ° ÿßŸÑŸÖÿ≠ÿ™ŸÖŸÑŸäŸÜ ÿ•ŸÑŸâ ŸÖÿ®Ÿäÿπÿßÿ™
   ‚Ä¢ ŸÖÿ™Ÿàÿ≥ÿ∑ ŸÇŸäŸÖÿ© ÿßŸÑŸÖÿπÿßŸÖŸÑÿ©

3. ÿßŸÑÿÆÿ∑ÿ∑ ŸàÿßŸÑÿ™ŸàŸÇÿπÿßÿ™
   ‚Ä¢ ÿ£ŸáÿØÿßŸÅ ÿßŸÑŸÅÿ™ÿ±ÿ© ÿßŸÑŸÇÿßÿØŸÖÿ©
   ‚Ä¢ ÿßÿ≥ÿ™ÿ±ÿßÿ™Ÿäÿ¨Ÿäÿßÿ™ ÿ≤ŸäÿßÿØÿ© ÿßŸÑŸÖÿ®Ÿäÿπÿßÿ™
   ‚Ä¢ ÿßŸÑŸÖŸàÿßÿ±ÿØ ÿßŸÑŸÖÿ∑ŸÑŸàÿ®ÿ©`,

                financial: `ÿßŸÑÿ™ŸÇÿ±Ÿäÿ± ÿßŸÑŸÖÿßŸÑŸä

1. ÿßŸÑŸÖÿ§ÿ¥ÿ±ÿßÿ™ ÿßŸÑŸÖÿßŸÑŸäÿ©
   ‚Ä¢ ÿßŸÑÿ•Ÿäÿ±ÿßÿØÿßÿ™ ŸàÿßŸÑÿ£ÿ±ÿ®ÿßÿ≠
   ‚Ä¢ ÿßŸÑŸÜŸÅŸÇÿßÿ™ ÿ≠ÿ≥ÿ® ÿßŸÑŸÅÿ¶ÿßÿ™
   ‚Ä¢ ÿßŸÑÿ™ÿØŸÅŸÇÿßÿ™ ÿßŸÑŸÜŸÇÿØŸäÿ©

2. ÿ™ÿ≠ŸÑŸäŸÑ ÿßŸÑÿ±ÿ®ÿ≠Ÿäÿ©
   ‚Ä¢ ŸáŸàÿßŸÖÿ¥ ÿßŸÑŸÖŸÜÿ™ÿ¨ÿßÿ™
   ‚Ä¢ ÿßŸÑŸÉŸÅÿßÿ°ÿ© ÿßŸÑÿ™ÿ¥ÿ∫ŸäŸÑŸäÿ©
   ‚Ä¢ ŸÜŸÇÿ∑ÿ© ÿßŸÑÿ™ÿπÿßÿØŸÑ

3. ÿßŸÑÿ™ÿÆÿ∑Ÿäÿ∑ ÿßŸÑŸÖÿßŸÑŸä
   ‚Ä¢ ÿßŸÑŸÖŸäÿ≤ÿßŸÜŸäÿ© ŸÑŸÑŸÅÿ™ÿ±ÿ© ÿßŸÑŸÇÿßÿØŸÖÿ©
   ‚Ä¢ ÿÆÿ∑ÿ∑ ÿßŸÑÿßÿ≥ÿ™ÿ´ŸÖÿßÿ±
   ‚Ä¢ ÿ•ÿØÿßÿ±ÿ© ÿßŸÑŸÖÿÆÿßÿ∑ÿ±`,

                analytics: `ÿ™ŸÇÿ±Ÿäÿ± ÿßŸÑÿ™ÿ≠ŸÑŸäŸÑÿßÿ™

1. ÿ¨ŸÖÿπ ÿßŸÑÿ®ŸäÿßŸÜÿßÿ™ ŸàÿßŸÑÿ™ÿ≠ŸÑŸäŸÑ
   ‚Ä¢ ŸÖÿµÿßÿØÿ± ÿßŸÑÿ®ŸäÿßŸÜÿßÿ™
   ‚Ä¢ ŸÖŸÜŸáÿ¨Ÿäÿ© ÿßŸÑÿ™ÿ≠ŸÑŸäŸÑ
   ‚Ä¢ ÿßŸÑŸÖŸÇÿßŸäŸäÿ≥ ÿßŸÑÿ±ÿ¶Ÿäÿ≥Ÿäÿ©

2. ÿßŸÑÿßÿ™ÿ¨ÿßŸáÿßÿ™ ÿßŸÑŸÖÿ≠ÿØÿØÿ©
   ‚Ä¢ ÿßŸÑÿ£ŸÜŸÖÿßÿ∑ ÿßŸÑÿ±ÿ¶Ÿäÿ≥Ÿäÿ©
   ‚Ä¢ ÿßŸÑÿßÿ±ÿ™ÿ®ÿßÿ∑ÿßÿ™ ÿßŸÑÿ•ÿ≠ÿµÿßÿ¶Ÿäÿ©
   ‚Ä¢ ÿßŸÑŸÜŸÖÿßÿ∞ÿ¨ ÿßŸÑÿ™ŸÜÿ®ÿ§Ÿäÿ©

3. ÿßŸÑÿßÿ≥ÿ™ŸÜÿ™ÿßÿ¨ÿßÿ™ ŸàÿßŸÑÿ™ŸàÿµŸäÿßÿ™
   ‚Ä¢ ÿßŸÑÿ™ŸàÿµŸäÿßÿ™ ÿßŸÑÿπŸÖŸÑŸäÿ©
   ‚Ä¢ ÿÆÿ∑ÿ© ÿßŸÑÿπŸÖŸÑ
   ‚Ä¢ ÿßŸÑŸÜÿ™ÿßÿ¶ÿ¨ ÿßŸÑŸÖÿ™ŸàŸÇÿπÿ©`,

                general: `ÿßŸÑÿ™ŸÇÿ±Ÿäÿ± ÿßŸÑÿπÿßŸÖ

1. ÿßŸÑŸÖŸÇÿØŸÖÿ©
   ‚Ä¢ ÿ∫ÿ±ÿ∂ ÿßŸÑÿ™ŸÇÿ±Ÿäÿ±
   ‚Ä¢ ÿßŸÑŸÖŸÜŸáÿ¨Ÿäÿ©
   ‚Ä¢ ÿßŸÑÿ£ÿ≥ÿ¶ŸÑÿ© ÿßŸÑÿ±ÿ¶Ÿäÿ≥Ÿäÿ©

2. ÿßŸÑÿ¨ÿ≤ÿ° ÿßŸÑÿ±ÿ¶Ÿäÿ≥Ÿä
   ‚Ä¢ ÿ™ÿ≠ŸÑŸäŸÑ ÿßŸÑŸàÿ∂ÿπ ÿßŸÑÿ≠ÿßŸÑŸä
   ‚Ä¢ ÿßŸÑŸÖÿ¥ÿßŸÉŸÑ ÿßŸÑŸÖÿ≠ÿØÿØÿ©
   ‚Ä¢ ŸÅÿ±ÿµ ÿßŸÑÿ™ÿ≠ÿ≥ŸäŸÜ

3. ÿßŸÑÿÆŸÑÿßÿµÿ©
   ‚Ä¢ ÿßŸÑŸÜÿ™ÿßÿ¶ÿ¨ ÿßŸÑÿ±ÿ¶Ÿäÿ≥Ÿäÿ©
   ‚Ä¢ ÿßŸÑÿ™ŸàÿµŸäÿßÿ™
   ‚Ä¢ ÿßŸÑÿÆÿ∑Ÿàÿßÿ™ ÿßŸÑÿ™ÿßŸÑŸäÿ©`
            }
        };

        const cleanReportType = reportType.replace(/-en$|-ar$/, '') as keyof typeof contentMap.russian;
        return contentMap[language][cleanReportType] || contentMap[language].general;
    }

    private generateSampleChart(reportType: string, language: InternalLanguage = 'russian'): any {
        const charts = {
            marketing: {
                type: 'bar',
                title: language === 'arabic' ? 'ŸÅÿπÿßŸÑŸäÿ© ÿßŸÑŸÇŸÜŸàÿßÿ™ ÿßŸÑÿ™ÿ≥ŸàŸäŸÇŸäÿ©' :
                    language === 'english' ? 'Marketing Channels Effectiveness' :
                        '–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤—ã—Ö –∫–∞–Ω–∞–ª–æ–≤',
                data: {
                    labels: language === 'arabic' ? ['ÿ•ÿπŸÑÿßŸÜÿßÿ™ ÿ¨Ÿàÿ¨ŸÑ', 'ŸÅŸäÿ≥ÿ®ŸàŸÉ', 'ÿßŸÑÿ•ŸäŸÖŸäŸÑ', 'ÿßŸÑÿ≥ŸäŸà', 'ŸÖÿ®ÿßÿ¥ÿ±'] :
                        language === 'english' ? ['Google Ads', 'Facebook', 'Email', 'SEO', 'Direct'] :
                            ['Google Ads', 'Facebook', 'Email', 'SEO', 'Direct'],
                    datasets: [{
                        label: language === 'arabic' ? 'ÿßŸÑÿ™ÿ≠ŸàŸäŸÑ (%)' :
                            language === 'english' ? 'Conversion (%)' :
                                '–ö–æ–Ω–≤–µ—Ä—Å–∏—è (%)',
                        data: [12, 19, 8, 15, 6],
                        backgroundColor: ['#3498DB', '#E74C3C', '#F39C12', '#27AE60', '#9B59B6'],
                        borderColor: ['#2980B9', '#C0392B', '#E67E22', '#229954', '#8E44AD'],
                        borderWidth: 1
                    }]
                },
                options: { responsive: false, animation: false }
            },
            sales: {
                type: 'line',
                title: language === 'arabic' ? 'ÿØŸäŸÜÿßŸÖŸäŸÉŸäÿ© ÿßŸÑŸÖÿ®Ÿäÿπÿßÿ™' :
                    language === 'english' ? 'Sales Dynamics' :
                        '–î–∏–Ω–∞–º–∏–∫–∞ –ø—Ä–æ–¥–∞–∂',
                data: {
                    labels: language === 'arabic' ? ['ŸäŸÜÿßŸäÿ±', 'ŸÅÿ®ÿ±ÿßŸäÿ±', 'ŸÖÿßÿ±ÿ≥', 'ÿ£ÿ®ÿ±ŸäŸÑ', 'ŸÖÿßŸäŸà', 'ŸäŸàŸÜŸäŸà'] :
                        language === 'english' ? ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun'] :
                            ['–Ø–Ω–≤', '–§–µ–≤', '–ú–∞—Ä', '–ê–ø—Ä', '–ú–∞–π', '–ò—é–Ω'],
                    datasets: [{
                        label: language === 'arabic' ? 'ÿßŸÑŸÖÿ®Ÿäÿπÿßÿ™ (ÿ£ŸÑŸÅ ÿ±Ÿàÿ®ŸÑ)' :
                            language === 'english' ? 'Sales (k RUB)' :
                                '–ü—Ä–æ–¥–∞–∂–∏ (—Ç—ã—Å. —Ä—É–±.)',
                        data: [100, 120, 140, 110, 160, 180],
                        backgroundColor: 'rgba(52, 152, 219, 0.2)',
                        borderColor: '#3498DB',
                        borderWidth: 2
                    }]
                },
                options: { responsive: false, animation: false }
            },
            financial: {
                type: 'pie',
                title: language === 'arabic' ? 'ŸáŸäŸÉŸÑ ÿßŸÑŸÜŸÅŸÇÿßÿ™' :
                    language === 'english' ? 'Expense Structure' :
                        '–°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ä–∞—Å—Ö–æ–¥–æ–≤',
                data: {
                    labels: language === 'arabic' ? ['ÿßŸÑÿ±ÿßÿ™ÿ®', 'ÿßŸÑÿ•Ÿäÿ¨ÿßÿ±', 'ÿßŸÑÿ•ÿπŸÑÿßŸÜ', 'ÿßŸÑŸÖÿ¥ÿ™ÿ±Ÿäÿßÿ™', 'ÿ£ÿÆÿ±Ÿâ'] :
                        language === 'english' ? ['Salary', 'Rent', 'Advertising', 'Purchases', 'Other'] :
                            ['–ó–∞—Ä–ø–ª–∞—Ç–∞', '–ê—Ä–µ–Ω–¥–∞', '–†–µ–∫–ª–∞–º–∞', '–ó–∞–∫—É–ø–∫–∏', '–ü—Ä–æ—á–µ–µ'],
                    datasets: [{
                        data: [40, 20, 15, 20, 5],
                        backgroundColor: ['#E74C3C', '#3498DB', '#F39C12', '#27AE60', '#9B59B6'],
                        borderColor: ['#C0392B', '#2980B9', '#E67E22', '#229954', '#8E44AD'],
                        borderWidth: 1
                    }]
                },
                options: { responsive: false, animation: false }
            }
        };

        return charts[reportType.replace(/-en$|-ar$/, '') as keyof typeof charts] || charts.sales;
    }

    private detectReportType(text: string): string {
        const lowerText = text.toLowerCase();

        if (lowerText.includes('–º–∞—Ä–∫–µ—Ç–∏–Ω–≥') || lowerText.includes('—Ä–µ–∫–ª–∞–º–∞')) {
            return 'marketing';
        } else if (lowerText.includes('–ø—Ä–æ–¥–∞–∂–∏') || lowerText.includes('–ø—Ä–æ–¥–∞–∂')) {
            return 'sales';
        } else if (lowerText.includes('—Ñ–∏–Ω–∞–Ω—Å') || lowerText.includes('–±—é–¥–∂–µ—Ç')) {
            return 'financial';
        } else if (lowerText.includes('–∞–Ω–∞–ª–∏—Ç–∏–∫') || lowerText.includes('–∞–Ω–∞–ª–∏–∑')) {
            return 'analytics';
        }

        return 'general';
    }

    private extractTitle(text: string): string {
        // –ò–∑–≤–ª–µ–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏–∑ —Ç–µ–∫—Å—Ç–∞
        const words = text.split(' ').slice(0, 8);
        let title = words.join(' ');

        if (text.split(' ').length > 8) {
            title += '...';
        }

        // –î–µ–ª–∞–µ–º –ø–µ—Ä–≤—É—é –±—É–∫–≤—É –∑–∞–≥–ª–∞–≤–Ω–æ–π
        return title.charAt(0).toUpperCase() + title.slice(1);
    }
}

export const pdfApiService = new PDFApiService();