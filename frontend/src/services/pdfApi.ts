// frontend/src/services/pdfApi.ts

export interface ChatMessage {
    role: 'user' | 'assistant';
    content: string;
}

export interface GenerateReportRequest {
    userMessage?: string;
    conversationHistory?: ChatMessage[];
    quickReportType?: string;
}

export interface GenerateReportResponse {
    success: boolean;
    pdfBlob?: Blob;
    error?: string;
}

export interface FeedbackRequest {
    currentDSL: any;
    userFeedback: string;
}

export interface FeedbackResponse {
    success: boolean;
    dsl?: any;
    explanation?: string;
    suggestions?: string[];
    error?: string;
}

export interface RenderDSLRequest {
    dsl: any;
}

class SimplePdfApiService {
    private readonly baseUrl: string;

    constructor() {
        this.baseUrl = import.meta.env.VITE_PDF_API_URL || 'http://localhost:3001';
        console.log('üîó PDF API URL:', this.baseUrl);
    }

    /**
     * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–∏–Ω–∏–º—É–º –¥–∞–Ω–Ω—ã—Ö, –≤—Å—è –ª–æ–≥–∏–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
     */
    async generateReport(request: GenerateReportRequest): Promise<GenerateReportResponse> {
        try {
            console.log('üöÄ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –æ—Ç—á–µ—Ç–∞...');
            console.log('üìù –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:', {
                userMessage: request.userMessage?.substring(0, 100),
                conversationHistory: request.conversationHistory?.length || 0,
                quickReportType: request.quickReportType
            });

            const response = await fetch(`${this.baseUrl}/api/report/generate`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(request),
            });

            if (!response.ok) {
                const errorData = await response.json().catch(() => null);
                return {
                    success: false,
                    error: errorData?.error || `HTTP error! status: ${response.status}`
                };
            }

            // –ü–æ–ª—É—á–∞–µ–º PDF –∫–∞–∫ blob
            const pdfBlob = await response.blob();
            console.log('üì¶ PDF –ø–æ–ª—É—á–µ–Ω, —Ä–∞–∑–º–µ—Ä:', pdfBlob.size, 'bytes');

            return {
                success: true,
                pdfBlob
            };

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞:', error);
            return {
                success: false,
                error: error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'
            };
        }
    }

    /**
     * –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ DSL –≤ PDF - –ø—Ä—è–º–æ–π –≤—ã–∑–æ–≤ —Ä–µ–Ω–¥–µ—Ä–∞ –±–µ–∑ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
     */
    async renderDSL(request: RenderDSLRequest): Promise<GenerateReportResponse> {
        try {
            console.log('üé® –û—Ç–ø—Ä–∞–≤–ª—è–µ–º DSL –Ω–∞ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥...');

            const response = await fetch(`${this.baseUrl}/api/render`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(request),
            });

            if (!response.ok) {
                const errorData = await response.json().catch(() => null);
                return {
                    success: false,
                    error: errorData?.message || errorData?.error || `HTTP error! status: ${response.status}`
                };
            }

            // –ü–æ–ª—É—á–∞–µ–º PDF –∫–∞–∫ blob
            const pdfBlob = await response.blob();
            console.log('üì¶ PDF –æ—Ç—Ä–µ–Ω–¥–µ—Ä–µ–Ω, —Ä–∞–∑–º–µ—Ä:', pdfBlob.size, 'bytes');

            return {
                success: true,
                pdfBlob
            };

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ DSL:', error);
            return {
                success: false,
                error: error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'
            };
        }
    }

    /**
     * –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∏–¥–±–µ–∫–∞ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –æ—Ç—á–µ—Ç–∞
     */
    async sendFeedback(request: FeedbackRequest): Promise<FeedbackResponse> {
        try {
            console.log('üîÑ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∏–¥–±–µ–∫...');

            const response = await fetch(`${this.baseUrl}/api/report/feedback`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(request),
            });

            if (!response.ok) {
                const errorData = await response.json().catch(() => null);
                return {
                    success: false,
                    error: errorData?.error || `HTTP error! status: ${response.status}`
                };
            }

            const data = await response.json();
            return {
                success: true,
                ...data
            };

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∏–¥–±–µ–∫–∞:', error);
            return {
                success: false,
                error: error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'
            };
        }
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ DSL –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π (—á–µ—Ä–µ–∑ —Å–µ—Ä–≤–µ—Ä)
     */
    async getLastGeneratedDSL(): Promise<{ success: boolean; dsl?: any; error?: string }> {
        try {
            console.log('üì• –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π DSL...');

            // –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –±–∞–∑–æ–≤—ã–π DSL
            // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—ã–ª –±—ã –∑–∞–ø—Ä–æ—Å –∫ —Å–µ—Ä–≤–µ—Ä—É
            const baseDSL = {
                template: "default",
                defaultFont: "DejaVuSans",
                defaultDirection: "ltr",
                pages: [{
                    elements: [
                        {
                            type: "text",
                            content: "–û—Ç—á—ë—Ç",
                            position: { x: 50, y: 100 },
                            style: {
                                fontSize: 24,
                                color: "#2C3E50",
                                width: 495,
                                align: "center",
                                font: "DejaVuSans"
                            }
                        },
                        {
                            type: "text",
                            content: "–î–∞–Ω–Ω—ã–µ –≤–∞—à–µ–≥–æ –æ—Ç—á–µ—Ç–∞",
                            position: { x: 50, y: 200 },
                            style: {
                                fontSize: 12,
                                color: "#34495E",
                                width: 495,
                                lineBreak: true,
                                font: "DejaVuSans"
                            }
                        }
                    ]
                }]
            };

            return {
                success: true,
                dsl: baseDSL
            };

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è DSL:', error);
            return {
                success: false,
                error: error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'
            };
        }
    }
}

export const simplePdfApiService = new SimplePdfApiService();